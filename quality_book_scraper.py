#!/usr/bin/env python3
# NOTE: Only officially published books should be included in the database.
# All entries must be available for purchase on Amazon (Kindle or physical).
# Exclude personal blogs, PDFs, or Substack articles.
# Exclude fiction books - only include non-fiction books.

"""
Quality Book Scraper for PM Book Recommendation App

This script scrapes high-quality product management books from Lenny's Podcast only.
Source: https://www.lennyslightninground.com/books/

All books must be:
1. Officially published and available on Amazon
2. Non-fiction books only (exclude all fiction)
3. Relevant to product management, leadership, business, or professional development

The script will:
1. Parse the 259 books from Lenny's Podcast that we've already successfully extracted
2. Filter out fiction books
3. Generate Amazon links, summaries, and metadata for each book
4. Output structured data ready for Airtable import
"""

import csv
import json
import requests
import time
import re
from dataclasses import dataclass, asdict
from typing import List, Optional, Dict, Set
from datetime import datetime
import logging
from urllib.parse import urljoin, urlparse
from bs4 import BeautifulSoup

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('book_scraper.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Schema constants
DIFFICULTY_LEVELS = ["Beginner", "Intermediate", "Advanced"]

INDUSTRY_FOCUS_OPTIONS = [
    "General", "B2B", "B2C", "Health Tech", "Fintech", 
    "AI / ML", "GovTech", "EdTech", "Marketplace", "E-commerce"
]

LEARNING_STYLE_OPTIONS = [
    "Narrative", "Framework-driven", "Reference-style", "Case Studies"
]

TAG_OPTIONS = [
    "fundamentals", "product strategy", "stakeholder management", 
    "technical skills", "growth", "data & analytics", "design & ux", 
    "leadership", "ai & emerging tech", "career navigation", 
    "discovery", "delivery & execution", "ethics & accessibility", 
    "communication"
]

SOURCE_OPTIONS = [
    "lenny's podcast"
]

# Single source URL
SOURCE_URLS = {
    "lenny's podcast": "https://www.lennyslightninground.com/books/"
}

# Headers for web scraping - more robust to avoid bot detection
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'en-US,en;q=0.5',
    'Accept-Encoding': 'gzip, deflate',
    'Connection': 'keep-alive',
    'Upgrade-Insecure-Requests': '1',
    'Sec-Fetch-Dest': 'document',
    'Sec-Fetch-Mode': 'navigate',
    'Sec-Fetch-Site': 'none',
    'Cache-Control': 'max-age=0'
}

@dataclass
class Book:
    """
    Book data class aligned with MVP Airtable schema.
    
    Only includes MVP fields as specified in good_books.json.
    """
    title: str
    author: str
    summary: str
    amazon_link: str
    difficulty_level: str  # One of: "Beginner", "Intermediate", "Advanced"
    tags: List[str]  # Multi-select field with lowercase values
    industry_focus: str  # One of the predefined industry options
    learning_style: str  # One of the predefined learning style options
    source: List[str]  # Multi-select field with lowercase values
    reason_for_inclusion: str
    published_year: int
    record_id: str = ""  # Generated by Airtable with RECORD_ID()
    
    def __post_init__(self):
        """Validate data after initialization."""
        self._validate_difficulty_level()
        self._validate_industry_focus()
        self._validate_learning_style()
        self._validate_tags()
        self._validate_source()
        self._validate_year()
        self._validate_officially_published()
    
    def _validate_difficulty_level(self):
        """Validate difficulty level is one of the allowed options."""
        if self.difficulty_level not in DIFFICULTY_LEVELS:
            raise ValueError(f"Invalid difficulty_level: {self.difficulty_level}. Must be one of {DIFFICULTY_LEVELS}")
    
    def _validate_industry_focus(self):
        """Validate industry focus is one of the allowed options."""
        if self.industry_focus not in INDUSTRY_FOCUS_OPTIONS:
            raise ValueError(f"Invalid industry_focus: {self.industry_focus}. Must be one of {INDUSTRY_FOCUS_OPTIONS}")
    
    def _validate_learning_style(self):
        """Validate learning style is one of the allowed options."""
        if self.learning_style not in LEARNING_STYLE_OPTIONS:
            raise ValueError(f"Invalid learning_style: {self.learning_style}. Must be one of {LEARNING_STYLE_OPTIONS}")
    
    def _validate_tags(self):
        """Validate all tags are lowercase and from allowed options."""
        if not isinstance(self.tags, list):
            raise ValueError("tags must be a list")
        
        for tag in self.tags:
            if not isinstance(tag, str):
                raise ValueError(f"All tags must be strings, got {type(tag)}")
            if tag.lower() != tag:
                raise ValueError(f"All tags must be lowercase, got '{tag}'")
            if tag not in TAG_OPTIONS:
                raise ValueError(f"Invalid tag: {tag}. Must be one of {TAG_OPTIONS}")
    
    def _validate_source(self):
        """Validate all sources are lowercase and from allowed options."""
        if not isinstance(self.source, list):
            raise ValueError("source must be a list")
        
        for src in self.source:
            if not isinstance(src, str):
                raise ValueError(f"All sources must be strings, got {type(src)}")
            if src.lower() != src:
                raise ValueError(f"All sources must be lowercase, got '{src}'")
            if src not in SOURCE_OPTIONS:
                raise ValueError(f"Invalid source: {src}. Must be one of {SOURCE_OPTIONS}")
    
    def _validate_year(self):
        """Validate published year is reasonable."""
        current_year = datetime.now().year
        if not isinstance(self.published_year, int):
            raise ValueError(f"published_year must be an integer, got {type(self.published_year)}")
        if self.published_year < 1900 or self.published_year > current_year + 1:
            raise ValueError(f"published_year must be between 1900 and {current_year + 1}, got {self.published_year}")
    
    def _validate_officially_published(self):
        """Validate that the book is officially published and available on Amazon."""
        # Check if Amazon link is valid and points to Amazon
        if not self.amazon_link:
            raise ValueError("amazon_link is required for officially published books")
        
        if not isinstance(self.amazon_link, str):
            raise ValueError(f"amazon_link must be a string, got {type(self.amazon_link)}")
        
        # Validate Amazon link format
        amazon_domains = [
            'amazon.com', 'amazon.co.uk', 'amazon.ca', 'amazon.de', 
            'amazon.fr', 'amazon.it', 'amazon.es', 'amazon.co.jp',
            'amazon.in', 'amazon.com.au', 'amazon.com.br', 'amazon.com.mx'
        ]
        
        is_valid_amazon_link = any(domain in self.amazon_link.lower() for domain in amazon_domains)
        if not is_valid_amazon_link:
            raise ValueError(f"amazon_link must be a valid Amazon URL, got: {self.amazon_link}")
        
        # Check for common non-book patterns that should be excluded
        excluded_patterns = [
            '/dp/B0',  # Kindle-only books without physical editions
            '/gp/product/B0',  # Alternative Kindle format
            'substack.com',
            'medium.com',
            'blog.',
            '.pdf',
            'notion.so',
            'docs.google.com',
            'github.com'
        ]
        
        for pattern in excluded_patterns:
            if pattern in self.amazon_link.lower():
                raise ValueError(f"amazon_link contains excluded pattern '{pattern}': {self.amazon_link}")
    
    def to_dict(self) -> dict:
        """Convert Book instance to dictionary for Airtable import."""
        return asdict(self)
    
    def to_csv_row(self) -> dict:
        """Convert Book instance to CSV row format."""
        return {
            'title': self.title,
            'author': self.author,
            'summary': self.summary,
            'amazon_link': self.amazon_link,
            'difficulty_level': self.difficulty_level,
            'tags': ', '.join(self.tags),  # Convert list to comma-separated string for CSV
            'industry_focus': self.industry_focus,
            'learning_style': self.learning_style,
            'source': ', '.join(self.source),  # Convert list to comma-separated string for CSV
            'reason_for_inclusion': self.reason_for_inclusion,
            'published_year': self.published_year
        }


def validate_officially_published_book(amazon_link: str, title: str = "") -> bool:
    """
    Utility function to validate if a book is officially published and available on Amazon.
    
    Use this function in any scraping logic to filter out non-books before creating Book instances.
    
    Args:
        amazon_link: The Amazon URL to validate
        title: Optional book title for logging purposes
    
    Returns:
        bool: True if the book is officially published, False otherwise
    """
    if not amazon_link:
        logger.warning(f"Skipping '{title}': No Amazon link provided")
        return False
    
    if not isinstance(amazon_link, str):
        logger.warning(f"Skipping '{title}': Amazon link must be a string")
        return False
    
    # Validate Amazon link format
    amazon_domains = [
        'amazon.com', 'amazon.co.uk', 'amazon.ca', 'amazon.de', 
        'amazon.fr', 'amazon.it', 'amazon.es', 'amazon.co.jp',
        'amazon.in', 'amazon.com.au', 'amazon.com.br', 'amazon.com.mx'
    ]
    
    is_valid_amazon_link = any(domain in amazon_link.lower() for domain in amazon_domains)
    if not is_valid_amazon_link:
        logger.warning(f"Skipping '{title}': Not a valid Amazon URL: {amazon_link}")
        return False
    
    # Check for common non-book patterns that should be excluded
    excluded_patterns = [
        '/dp/B0',  # Kindle-only books without physical editions
        '/gp/product/B0',  # Alternative Kindle format
        'substack.com',
        'medium.com',
        'blog.',
        '.pdf',
        'notion.so',
        'docs.google.com',
        'github.com'
    ]
    
    for pattern in excluded_patterns:
        if pattern in amazon_link.lower():
            logger.warning(f"Skipping '{title}': Contains excluded pattern '{pattern}': {amazon_link}")
            return False
    
    # Verify the link is active
    try:
        response = requests.head(amazon_link, headers=HEADERS, timeout=10)
        if response.status_code != 200:
            logger.warning(f"Skipping '{title}': Amazon link returned status {response.status_code}: {amazon_link}")
            return False
    except Exception as e:
        logger.warning(f"Skipping '{title}': Could not verify Amazon link: {e}")
        return False
    
    logger.info(f"✅ Validated officially published book: {title}")
    return True


def get_unique_key(book: Book) -> str:
    """Generate a unique key for a book based on title and author."""
    return f"{book.title.lower().strip()}_{book.author.lower().strip()}"


def parse_book_section(text: str, section_type: str) -> List[Dict]:
    """
    Parse a section of book text (either top books or episode books).
    
    Args:
        text: The text to parse
        section_type: Either "top" or "episode"
    
    Returns:
        List[Dict]: List of book dictionaries
    """
    books = []
    
    # Split by numbers (counts) to find book entries
    import re
    parts = re.split(r'\s+(\d+)\s+', text)
    
    found_books = set()
    
    for i in range(1, len(parts) - 1, 2):  # Skip first part, then alternate between count and text
        count = parts[i]
        text_part = parts[i + 1] if i + 1 < len(parts) else ""
        
        if not count.isdigit() or not text_part.strip():
            continue
        
        # The text_part should contain "Title Author" 
        # We need to separate title from author
        words = text_part.strip().split()
        if len(words) < 2:
            continue
        
        # Comprehensive list of known authors with their full names
        known_authors = [
            'Andrew S. Grove', 'Marty Cagan', 'Tony Fadell', 'Don Norman', 'Ben Horowitz',
            'David Epstein', 'Donella H. Meadows', 'A.G. Lafley', 'Roger L. Martin', 
            'Robert Greene', 'Walter Isaacson', 'Min Jin Lee', 'Jim Dethmer', 'Diana Chapman',
            'Kaley Klemp', 'Daniel Kahneman', 'Elad Gil', 'Claire Hughes Johnson', 'Dale Carnegie',
            'Cixin Liu', 'Robert B. Cialdini', 'Geoffrey A. Moore', 'Eliyahu M Goldratt',
            'Jeff Cox', 'Nir Eyal', 'April Dunford', 'Colin Bryar', 'Bill Carr', 'Bill Burnett',
            'Eric Ries', 'Kim Scott', 'Reed Hastings', 'Erin Meyer', 'Andy Weir', 'Brandon Sanderson',
            'Nate Soares', 'Sebastian Mallaby', 'F. Scott Fitzgerald', 'Marshall B. Rosenberg', 
            'Peter Zeihan', 'Mark Robichaux', 'David Rock', 'Mihaly Csikszentmihalyi',
            'Joseph Campbell', 'Neal Gabler', 'Ed Catmull', 'Amy Wallace', 'Tom Kelley', 'Jonathan Littman',
            'Dennis E. Taylor', 'Michael A. Singer', 'Joseph Nguyen', 'James Richardson',
            'W. Timothy Gallwey', 'Abraham Verghese', 'Madeline Miller', 'Ichak Kalderon Adizes',
            'Michael Lewis', 'Marshall Brain', 'John Brooks', 'Taylor Kay Phillips',
            'Ernest K. Gann', 'Danny Meyer', 'Bill Bryson', 'Claude Hopkins',
            'Roger Bannister', 'Dan Davies', 'Jonathan Haidt', 'Chip Heath', 'Dan Heath',
            'Erik Larson', 'Yuval Noah Harari', 'Rick Rubin', 'Cyrus Highsmith', 'Patti Smith',
            'Siddhartha Mukherjee', 'Isaac Asimov', 'Gay Hendricks', 'Richard Rumelt', 'Brian Christian',
            'Leo Tolstoy', 'George Saunders', 'Iain McGilchrist', 'Felix Dennis', 'Eric Greitens',
            'Andrew Roberts', 'Peter Frankopan', 'Candice Millard', 'John Steinbeck', 'Ernest Hemingway',
            'Robert Bringhurst', 'Robert M Pirsig', 'Robert Grudin', 'Homer', 'M. Mitchell Waldrop',
            'Frank Herbert', 'Tom Rath', 'Sahil Bloom', 'Max S. Bennett', 'Keith Johnstone',
            'William Shakespeare', 'Ethan Mollick', 'Various Authors', 'Richard H. Thaler',
            'Martin Lindstrom', 'Marshall Goldsmith', 'Mark Reiter', 'Pema Chodron', 'Carol S. Dweck',
            'Pierce Brown', 'Hugh Howey', 'Jeffrey Pfeffer', 'Robert Livingston', 'Chris Voss',
            'Tahl Raz', 'Lee Ross', 'Richard E. Nisbett', 'Nassim Nicholas Taleb', 'Gregory David Roberts',
            'Jim Collins', 'Morten T. Hansen', 'Kate Quinn', 'James H. Austin', 'P. G. Wodehouse',
            'Keith Richards', 'James Fox', 'Barbra Streisand', 'Guff Smert', 'Charles Hervé-Gruyer',
            'Perrine Hervé-Gruyer', 'Marc Randolph', 'Cal Newport', 'Adam Grant', 'Neal Stephenson',
            'Patrick Rothfuss', 'J. K. Rowling', 'Greg McKeown', 'Nils Davis', 'Tim Urban',
            'Haruki Murakami', 'Salman Khan', 'Matthew Walker', 'David Whyte', 'Jamie Wheal',
            'Anne Fridjhon', 'Marita Rød', 'Italo Calvino', 'George Lakoff', 'Barbara Kellerman',
            'Barbara Kingsolver', 'Martha Wells', 'Rory Sutherland', 'Andy Clark', 'Patrick Lencioni',
            'Verlyn Klinkenborg', 'Derek Sivers', 'Vladimir Arkhipov', 'Peter D. Kaufman',
            'Nathaniel Philbrick', 'Kate DiCamillo', 'Jessi Klein', 'Byron Sharp', 'Joost Elffers',
            'Arundhati Roy', 'Bell Hooks', 'Dan Simmons', 'Vernor Vinge', 'Luke Burgis',
            'Stephen Bungay', 'Melissa Perri', 'Oliver Burkeman', 'Annie Duke', 'Peter F. Drucker',
            'Amor Towles', 'Ray Dalio', 'Donald A. Norman', 'Jason Hook', 'Charlie Mackesy',
            'H. G. Wells', 'Stephen King', 'Fyodor Dostoevsky', 'Salman Rushdie', 'Richard Bach',
            'Mark H. McCormack', 'Phil Rosenzweig', 'Jim Manchester', 'Stanley A. McChrystal',
            'Tantum Collins', 'David Silverman', 'Chris Fussell', 'Yvon Chouinard', 'Robert A. Caro',
            'Ryan Singer', 'Octavia E. Butler', 'Madeleine L\'Engle', 'Warren G. Bennis',
            'Seth Stephens-Davidowitz', 'Paul Kalanithi', 'Orson Scott Card', 'Carl T. Bergstrom',
            'Jevin D. West', 'Carol Tavris', 'Elliot Aronson', 'Kim Malone Scott', 'Doris Kearns Goodwin',
            'Diana Wright', 'David J. Epstein', 'Erich Maria Remarque', 'Alice Schroeder',
            'Margaret Atwood', 'Paulo Coelho', 'Miguel Ruiz', 'John J. Ratey', 'Mike Allen',
            'Jim VandeHei', 'Roy Schwartz', 'Peter Attia', 'Bill Gifford', 'Steven Pressfield',
            'The Arbinger Institute', 'Iain M. Banks', 'Geoff Dyer', 'Amir D. Aczel', 'Sean M. Carroll',
            'Carlo Rovelli', 'David Deutsch', 'Walter Dixon', 'Donald Hoffman', 'Ernest Nagel',
            'James R. Newman', 'Douglas R. Hofstadter', 'Paul Davies', 'Adrian Tchaikovsky',
            'Robert Joseph Miller', 'Nick Bilton', 'Lao Tzu', 'Frank Slootman', 'Jim Collins',
            'Robert H. Lustig', 'Seth Godin', 'Emily Oster', 'Anna Akhmatova', 'James Baldwin',
            'Marshall Goldsmith', 'Hila Qu', 'Colleen Hoover', 'Steven Pressfield', 'Crockett Johnson',
            'Lawrence Wechsler', 'Amy C. Edmondson', 'David Mitchell', 'Solomon Goldstein-Rose',
            'Bhante H. Gunaratana', 'Steven James Keays', 'Joseph Murphy', 'Janelle Shane',
            'Anne Lamott', 'Nick Seaver', 'Ann Leckie', 'Gary Kamiya', 'Nicole Forsgren PhD',
            'Jez Humble', 'Gene Kim', 'David L. Bradford', 'Carole Robin', 'Elizabeth Dunn',
            'Bill Perkins', 'Bill Walsh', 'Rolf Dobelli', 'Joshua Seiden', 'Hans Christian Andersen',
            'Ron Stack', 'Will Larson', 'Oscar Wilde', 'Nicole Perlroth', 'Sherab Chodzin Kohn',
            'Thích Nhất Hạnh', 'Dan Ariely', 'Robert H. Frank', 'Malcolm Gladwell', 'Anthony Doerr',
            'Book LORD', 'June Casagrande', 'Bryan A. Garner', 'Al Ries', 'Jack Trout', 'Brit Bennett',
            'Scott McCloud', 'Deb Liu', 'Melissa Perri', 'Bob Anderson', 'Peter Sims', 'David Allen'
        ]
        
        # Try to find author in the text using a more sophisticated approach
        title = text_part.strip()
        author = ""
        
        # First, try to find exact matches with known authors
        for author_name in known_authors:
            if author_name in text_part:
                # Find where author starts
                author_start = text_part.find(author_name)
                if author_start > 0:
                    # Make sure we're not cutting off part of the title
                    potential_title = text_part[:author_start].strip()
                    # Check if the potential title ends with a word that might be part of the author's name
                    if potential_title and not potential_title.endswith(' ' + author_name.split()[0]):
                        title = potential_title
                        author = text_part[author_start:].strip()
                        break
        
        # If we didn't find a known author, try pattern matching
        if not author:
            # Look for patterns like "Title by Author" or "Title Author"
            # Common patterns in book titles
            title_patterns = [
                r'^(.+?)\s+by\s+(.+)$',  # "Title by Author"
                r'^(.+?)\s+([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)$',  # "Title Author" (capitalized name)
                r'^(.+?)\s+([A-Z]\.[A-Z]?\s+[A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)$',  # "Title A. Author"
            ]
            
            for pattern in title_patterns:
                match = re.match(pattern, text_part.strip())
                if match:
                    potential_title = match.group(1).strip()
                    potential_author = match.group(2).strip()
                    
                    # Validate that the potential author looks like a real name
                    if (len(potential_author.split()) >= 1 and 
                        len(potential_author.split()) <= 4 and
                        all(word[0].isupper() for word in potential_author.split() if word)):
                        title = potential_title
                        author = potential_author
                        break
        
        # If still no author found, try a smarter fallback
        if not author and len(words) >= 2:
            # Look for the last capitalized word or words that might be an author
            for i in range(len(words) - 1, 0, -1):
                potential_author = ' '.join(words[i:])
                potential_title = ' '.join(words[:i])
                
                # Check if potential author looks like a name
                if (len(potential_author.split()) <= 4 and 
                    all(word[0].isupper() for word in potential_author.split() if word) and
                    len(potential_title) > 10):  # Make sure title is substantial
                    title = potential_title
                    author = potential_author
                    break
        
        # Clean up
        title = title.strip()
        author = author.strip()
        
        # Skip if this looks like navigation or is too short
        skip_words = ['episodes', 'books', 'movies', 'tv', 'shows', 'products', 'interview', 'questions', 
                     'recommended', 'top', 'title', 'author', 'count', 'back', 'to', 'top', 'lenny', 
                     'lightning', 'round', 'toggle', 'menu', 'all recommended books by episode', 
                     'date guest title author']
        if any(skip_word in title.lower() for skip_word in skip_words):
            continue
        
        # Additional validation and corrections
        if (title and len(title) > 3 and 
            author and len(author) > 1 and 
            title not in found_books and
            not author.lower() in ['from', 'to', 'the', 'and', 'or', 'but', 'in', 'on', 'at']):
            
                            # Specific corrections for known problematic entries
                corrections = {
                    'Brandon': ('Brandon Sanderson Books', 'Brandon Sanderson'),
                    'Nickels The 15 Commitments of Conscious Leadership: A New Paradigm for Sustainable Success': ('The 15 Commitments of Conscious Leadership: A New Paradigm for Sustainable Success', 'Jim Dethmer, Diana Chapman, Kaley Klemp'),
                    'Qureshi Impro: Improvisation and the Theatre': ('Impro: Improvisation and the Theatre', 'Keith Johnstone'),
                    'Qureshi High Output Management': ('High Output Management', 'Andrew S. Grove'),
                    'The Origin of Wealth: The Radical Remaking of Economics and What it Means for Business and Society Eric D.': ('The Origin of Wealth: The Radical Remaking of Economics and What it Means for Business and Society', 'Eric D. Beinhocker'),
                    'Misbehaving: The Making of Behavioral Economics Richard H.': ('Misbehaving: The Making of Behavioral Economics', 'Richard H. Thaler'),
                    'Small Data: The Tiny Clues That Uncover Huge Trends Martin': ('Small Data: The Tiny Clues That Uncover Huge Trends', 'Martin Lindstrom'),
                    'What Got You Here Won\'t Get You There: How Successful People Become Even More Successful Marshall Goldsmith,': ('What Got You Here Won\'t Get You There: How Successful People Become Even More Successful', 'Marshall Goldsmith, Mark Reiter'),
                    'When Things Fall Apart: Heart Advice for': ('When Things Fall Apart: Heart Advice for Difficult Times', 'Pema Chodron'),
                    'Mindset: The New Psychology of Success Carol S.': ('Mindset: The New Psychology of Success', 'Carol S. Dweck'),
                    'The Conversation: How Seeking and Speaking the Truth About Racism Can Radically Transform Individuals and Organizations IRobert': ('The Conversation: How Seeking and Speaking the Truth About Racism Can Radically Transform Individuals and Organizations', 'Robert Livingston'),
                    'The Paper Menagerie and': ('The Paper Menagerie and Other Stories', 'Ken Liu'),
                    'Never Split the Difference: Negotiating As If Your Life Depended On It Chris Voss,': ('Never Split the Difference: Negotiating As If Your Life Depended On It', 'Chris Voss, Tahl Raz'),
                    'The Person and the Situation: Perspectives of Social Psychology Lee Ross, Richard E.': ('The Person and the Situation: Perspectives of Social Psychology', 'Lee Ross, Richard E. Nisbett'),
                    'Cambridge Fundamentals of Neuroscience in': ('Cambridge Fundamentals of Neuroscience in Psychology', 'Various Authors'),
                    'The Black Swan: The Impact of the Highly Improbable Nassim Nicholas': ('The Black Swan: The Impact of the Highly Improbable', 'Nassim Nicholas Taleb'),
                    'Great by Choice: Uncertainty, Chaos, and Luck--Why Some Thrive Despite Them All Jim Collins, Morten T.': ('Great by Choice: Uncertainty, Chaos, and Luck--Why Some Thrive Despite Them All', 'Jim Collins, Morten T. Hansen'),
                    '7 Powers: The Foundations of': ('7 Powers: The Foundations of Business Strategy', 'Hamilton Helmer'),
                    'Jr. Chase, Chance, and Creativity: The Lucky Art of Novelty James H.': ('Chase, Chance, and Creativity: The Lucky Art of Novelty', 'James H. Austin'),
                    'Jr. The Laws of Human Nature': ('The Laws of Human Nature', 'Robert Greene'),
                    'Life Keith Richards,': ('Life', 'Keith Richards, James Fox'),
                    'My Name Is Barbra Barbra': ('My Name Is Barbra', 'Barbra Streisand'),
                    'Who: A Method for': ('Who: A Method for Hiring', 'Guff Smert'),
                    'Living with the Earth, Volume 1: Permaculture, Ecoculture: Inspired by Nature Charles Hervé-Gruyer, Perrine': ('Living with the Earth, Volume 1: Permaculture, Ecoculture: Inspired by Nature', 'Charles Hervé-Gruyer, Perrine Hervé-Gruyer'),
                    'That Will Never Work: The Birth of Netflix and the Amazing Life of an': ('That Will Never Work: The Birth of Netflix and the Amazing Life of an Idea', 'Marc Randolph'),
                    'Deep Work: Rules for Focused Success in a': ('Deep Work: Rules for Focused Success in a Distracted World', 'Cal Newport'),
                    'Originals: How Non-Conformists Move the': ('Originals: How Non-Conformists Move the World', 'Adam Grant'),
                    'Reamde: A': ('Reamde: A Novel', 'Neal Stephenson'),
                    'Essentialism: The Disciplined Pursuit of Less Greg': ('Essentialism: The Disciplined Pursuit of Less', 'Greg McKeown'),
                    'The Mission Critical Core/Context Model For Product Managers Nils': ('The Mission Critical Core/Context Model For Product Managers', 'Nils Davis'),
                    'What\'s Our Problem?: A Self-Help Book for': ('What\'s Our Problem?: A Self-Help Book for Societies', 'Tim Urban'),
                    'Bosworth The Dream Machine': ('The Dream Machine', 'M. Mitchell Waldrop'),
                    'What I Talk About When I Talk About Running: A': ('What I Talk About When I Talk About Running: A Memoir', 'Haruki Murakami'),
                    'The One World Schoolhouse Salman': ('The One World Schoolhouse', 'Salman Khan'),
                    'Why We Sleep: Unlocking the Power of Sleep and': ('Why We Sleep: Unlocking the Power of Sleep and Dreams', 'Matthew Walker'),
                    'Consolations: The Solace, Nourishment and Underlying Meaning of': ('Consolations: The Solace, Nourishment and Underlying Meaning of Everyday Words', 'David Whyte'),
                    'Recapture the Rapture: Rethinking God, Sex, and Death in a World That\'s Lost Its Mind Jamie': ('Recapture the Rapture: Rethinking God, Sex, and Death in a World That\'s Lost Its Mind', 'Jamie Wheal'),
                    'Creating Intelligent Teams Anne; Fridjhon Marita Rød,': ('Creating Intelligent Teams', 'Anne Fridjhon, Marita Rød'),
                    'Invisible': ('Invisible Cities', 'Italo Calvino'),
                    'The ALL NEW Don\'t Think of an Elephant!: Know Your Values and Frame the': ('The ALL NEW Don\'t Think of an Elephant!: Know Your Values and Frame the Debate', 'George Lakoff'),
                    'Bad Leadership: What It Is, How It Happens, Why It Matters Barbara': ('Bad Leadership: What It Is, How It Happens, Why It Matters', 'Barbara Kellerman'),
                    'Demon': ('Demon Copperhead', 'Barbara Kingsolver'),
                    'Alchemy: The Dark Art and Curious Science of Creating Magic in Brands, Business, and': ('Alchemy: The Dark Art and Curious Science of Creating Magic in Brands, Business, and Life', 'Rory Sutherland'),
                    'The Experience Machine: How Our Minds Predict and': ('The Experience Machine: How Our Minds Predict and Shape Reality', 'Andy Clark'),
                    'The Five Temptations of a CEO: A': ('The Five Temptations of a CEO: A Leadership Fable', 'Patrick Lencioni'),
                    'The Five Dysfunctions of a Team: A': ('The Five Dysfunctions of a Team: A Leadership Fable', 'Patrick Lencioni'),
                    'Hell Yeah or No: What\'s': ('Hell Yeah or No: What\'s Worth Doing', 'Derek Sivers'),
                    'Poor Charlie\'s Almanack: The Essential Wit and Wisdom of Charles T. Munger Peter D.': ('Poor Charlie\'s Almanack: The Essential Wit and Wisdom of Charles T. Munger', 'Peter D. Kaufman'),
                    'In the Heart of the Sea: The Tragedy of the': ('In the Heart of the Sea: The Tragedy of the Whaleship Essex', 'Nathaniel Philbrick'),
                    'The Tale of Despereaux Kate': ('The Tale of Despereaux', 'Kate DiCamillo'),
                    'I\'ll Show Myself Out: Essays on Midlife and': ('I\'ll Show Myself Out: Essays on Midlife and Motherhood', 'Jessi Klein'),
                    'You\'ll Grow Out of': ('You\'ll Grow Out of It', 'Jessi Klein'),
                    'How Brands Grow: What Marketers Don\'t': ('How Brands Grow: What Marketers Don\'t Know', 'Byron Sharp'),
                    'The God of': ('The God of Small Things', 'Arundhati Roy'),
                    'A Fire Upon the': ('A Fire Upon the Deep', 'Vernor Vinge'),
                    'Wanting: The Power of Mimetic Desire in': ('Wanting: The Power of Mimetic Desire in Everyday Life', 'Luke Burgis'),
                    'and Denise Tilles The Art of Action: How Leaders Close the Gaps between Plans, Actions, and': ('The Art of Action: How Leaders Close the Gaps between Plans, Actions, and Results', 'Stephen Bungay'),
                    'and Denise Tilles Escaping the Build Trap: How Effective Product Management Creates Real Value Melissa': ('Escaping the Build Trap: How Effective Product Management Creates Real Value', 'Melissa Perri'),
                    'Four Thousand Weeks: Time Management for': ('Four Thousand Weeks: Time Management for Mortals', 'Oliver Burkeman'),
                    'Thinking in Bets: Making Smarter Decisions When You Don\'t Have All the': ('Thinking in Bets: Making Smarter Decisions When You Don\'t Have All the Facts', 'Annie Duke'),
                    'The Practice of Management Peter F.': ('The Practice of Management', 'Peter F. Drucker'),
                    'A Gentleman in': ('A Gentleman in Moscow', 'Amor Towles'),
                    'The Grace of': ('The Grace of Kings', 'Ken Liu'),
                    'Principles: Life and': ('Principles: Life and Work', 'Ray Dalio'),
                    'The Challenger Sale: Taking Control of the': ('The Challenger Sale: Taking Control of the Customer Conversation', 'Matthew Dixon'),
                    'Positioning: The Battle for Your Mind Al Ries,': ('Positioning: The Battle for Your Mind', 'Al Ries, Jack Trout'),
                    'The Design of Everyday Things Donald A.': ('The Design of Everyday Things', 'Donald A. Norman'),
                    'The Boy, the Mole, the Fox and the': ('The Boy, the Mole, the Fox and the Horse', 'Charlie Mackesy'),
                    'The Timeless Way of': ('The Timeless Way of Building', 'Christopher Alexander'),
                    'Good Strategy/Bad Strategy: The Difference and Why It Matters Richard P.': ('Good Strategy/Bad Strategy: The Difference and Why It Matters', 'Richard P. Rumelt'),
                    'Children of Time H. G.': ('Children of Time', 'H. G. Wells'),
                    'Crime and': ('Crime and Punishment', 'Fyodor Dostoevsky'),
                    'Midnight\'s': ('Midnight\'s Children', 'Salman Rushdie'),
                    'Illusions: The Adventures of a': ('Illusions: The Adventures of a Reluctant Messiah', 'Richard Bach'),
                    'What They Don\'t Teach You at Harvard Business School: Notes from a Street-Smart Executive Mark H.': ('What They Don\'t Teach You at Harvard Business School: Notes from a Street-Smart Executive', 'Mark H. McCormack'),
                    'The Halo Effect: . . . and the Eight Other Business Delusions That Deceive Managers Phil Rosenzweig,': ('The Halo Effect: . . . and the Eight Other Business Delusions That Deceive Managers', 'Phil Rosenzweig, Jim Manchester'),
                    'Team of Teams: New Rules of Engagement for a Complex World Stanley A. McChrystal, Tantum Collins, David Silverman,': ('Team of Teams: New Rules of Engagement for a Complex World', 'Stanley A. McChrystal, Tantum Collins, David Silverman, Chris Fussell'),
                    'Let My People Go Surfing: The Education of a': ('Let My People Go Surfing: The Education of a Reluctant Businessman', 'Yvon Chouinard'),
                    'The Power Broker: Robert Moses and the Fall of New York Robert A.': ('The Power Broker: Robert Moses and the Fall of New York', 'Robert A. Caro'),
                    'Shape': ('Shape Up', 'Ryan Singer'),
                    'Kindred Octavia E.': ('Kindred', 'Octavia E. Butler'),
                    'A Wrinkle in Time Madeleine': ('A Wrinkle in Time', 'Madeleine L\'Engle'),
                    'The Art and Adventure of Leadership Warren G.': ('The Art and Adventure of Leadership', 'Warren G. Bennis'),
                    'Everybody Lies: Big Data, New Data, and What the Internet Can Tell Us About Who We Really Are Seth': ('Everybody Lies: Big Data, New Data, and What the Internet Can Tell Us About Who We Really Are', 'Seth Stephens-Davidowitz'),
                    'When Breath Becomes Air Paul': ('When Breath Becomes Air', 'Paul Kalanithi'),
                    'Ender\'s': ('Ender\'s Game', 'Orson Scott Card'),
                    'Calling Bullshit Carl T. Bergstrom, Jevin D.': ('Calling Bullshit', 'Carl T. Bergstrom, Jevin D. West'),
                    'Mistakes were made, but not by me Carol Tavris,': ('Mistakes were made, but not by me', 'Carol Tavris, Elliot Aronson'),
                    'Radical': ('Radical Candor', 'Kim Malone Scott'),
                    'Leadership: In Turbulent Times Doris Kearns': ('Leadership: In Turbulent Times', 'Doris Kearns Goodwin'),
                    'Thinking in Systems Donella Meadows,': ('Thinking in Systems', 'Donella Meadows, Diana Wright'),
                    'Range: Why Generalists Triumph in a Specialized World David J.': ('Range: Why Generalists Triumph in a Specialized World', 'David J. Epstein'),
                    'Quiet': ('Quiet', 'Erich Maria Remarque'),
                    'The Snowball: Warren Buffett and the Business of': ('The Snowball: Warren Buffett and the Business of Life', 'Alice Schroeder'),
                    'Never Split the Difference: Negotiating as If Your Life Depended on It Chris Voss,': ('Never Split the Difference: Negotiating as If Your Life Depended on It', 'Chris Voss, Tahl Raz'),
                    'Spark: The Revolutionary New Science of Exercise and the Brain John J.': ('Spark: The Revolutionary New Science of Exercise and the Brain', 'John J. Ratey'),
                    'Smart Brevity: The Power of Saying More with Less Mike Allen, Jim VandeHei,': ('Smart Brevity: The Power of Saying More with Less', 'Mike Allen, Jim VandeHei, Roy Schwartz'),
                    'Outlive: The Science and Art of Longevity Peter Attia,': ('Outlive: The Science and Art of Longevity', 'Peter Attia, Bill Gifford'),
                    'The War of Art: Break Through the Blocks and Win Your Inner Creative Battles Steven': ('The War of Art: Break Through the Blocks and Win Your Inner Creative Battles', 'Steven Pressfield'),
                    'Leadership and Self-Deception: Getting Out of the': ('Leadership and Self-Deception: Getting Out of the Box', 'The Arbinger Institute'),
                    'The Writer\'s': ('The Writer\'s Journey', 'Christopher Vogler'),
                    'Out of': ('Out of Sheer Rage', 'Geoff Dyer'),
                    'm 7 Powers: The Foundations of': ('7 Powers: The Foundations of Business Strategy', 'Hamilton Helmer'),
                    'm The Mystery of the Aleph: Mathematics, the Kabbalah, and the Search for Infinity Amir D.': ('The Mystery of the Aleph: Mathematics, the Kabbalah, and the Search for Infinity', 'Amir D. Aczel'),
                    'm Something Deeply Hidden: Quantum Worlds and the Emergence of Spacetime Sean M.': ('Something Deeply Hidden: Quantum Worlds and the Emergence of Spacetime', 'Sean M. Carroll'),
                    'm Helgoland: Making Sense of the': ('Helgoland: Making Sense of the Quantum Revolution', 'Carlo Rovelli'),
                    'm The Beginning of Infinity: Explanations That Transform the World Deutsch,': ('The Beginning of Infinity: Explanations That Transform the World', 'David Deutsch'),
                    'm The Fabric of Reality: The Science of Parallel Universes—and Its Implications David Deutsch,': ('The Fabric of Reality: The Science of Parallel Universes—and Its Implications', 'David Deutsch, Walter Dixon'),
                    'm The Case Against Reality: Why Evolution Hid the Truth from': ('The Case Against Reality: Why Evolution Hid the Truth from Our Eyes', 'Donald Hoffman'),
                    'm Gödel\'s Proof Ernest Nagel, James R. Newman, Douglas R.': ('Gödel\'s Proof', 'Ernest Nagel, James R. Newman, Douglas R. Hofstadter'),
                    'm The Demon in the Machine: How Hidden Webs of Information Are Solving the Mystery of Life Davies,': ('The Demon in the Machine: How Hidden Webs of Information Are Solving the Mystery of Life', 'Paul Davies'),
                    'Children of': ('Children of Time', 'Adrian Tchaikovsky'),
                    'Fire in the': ('Fire in the Deep', 'Robert Joseph Miller'),
                    'American': ('American Kingpin', 'Nick Bilton'),
                    'Never Split the Difference: Negotiating As If Your Life Depended on It Chris Voss,': ('Never Split the Difference: Negotiating As If Your Life Depended on It', 'Chris Voss, Tahl Raz'),
                    'Amp It Up: Leading for Hypergrowth by Raising Expectations, Increasing Urgency, and': ('Amp It Up: Leading for Hypergrowth by Raising Expectations, Increasing Urgency, and Elevating Intensity', 'Frank Slootman'),
                    'Rekhi Influence: The Psychology of Persuasion': ('Influence: The Psychology of Persuasion', 'Robert B. Cialdini'),
                    'Great by Choice Jim Collins, Morten T.': ('Great by Choice', 'Jim Collins, Morten T. Hansen'),
                    'Metabolical: The Lure and the Lies of Processed Food, Nutrition, and Modern Medicine Robert H': ('Metabolical: The Lure and the Lies of Processed Food, Nutrition, and Modern Medicine', 'Robert H. Lustig'),
                    'Purple Cow: Transform Your Business': ('Purple Cow: Transform Your Business by Being Remarkable', 'Seth Godin'),
                    'Expecting': ('Expecting Better', 'Emily Oster'),
                    'You Will Hear Thunder Anna': ('You Will Hear Thunder', 'Anna Akhmatova'),
                    'The Fire Next Time James': ('The Fire Next Time', 'James Baldwin'),
                    '硅谷增长黑客实战笔记': ('硅谷增长黑客实战笔记', 'Hila Qu'),
                    'Someday': ('Someday', 'Colleen Hoover'),
                    'Meservey Gates of Fire: An Epic Novel of the Battle of': ('Gates of Fire: An Epic Novel of the Battle of Thermopylae', 'Steven Pressfield'),
                    'Harold and the': ('Harold and the Purple Crayon', 'Crockett Johnson'),
                    'Seeing Is Forgetting the Name of the Thing One Sees Lawrence': ('Seeing Is Forgetting the Name of the Thing One Sees', 'Lawrence Wechsler'),
                    'The Fearless Organization: Creating Psychological Safety in the Workplace for Learning, Innovation, and Growth Amy C.': ('The Fearless Organization: Creating Psychological Safety in the Workplace for Learning, Innovation, and Growth', 'Amy C. Edmondson'),
                    'Cloud': ('Cloud Atlas', 'David Mitchell'),
                    'mer The 100% Solution: A Plan for Solving Climate Change Solomon': ('The 100% Solution: A Plan for Solving Climate Change', 'Solomon Goldstein-Rose'),
                    'Mindfulness in Plain English Bhante H.': ('Mindfulness in Plain English', 'Bhante H. Gunaratana'),
                    'The New Product Development Game P.Eng Steven James Keays': ('The New Product Development Game', 'P.Eng Steven James Keays M.A.Sc.'),
                    'Thinking in Bets: Making Smarter Decisions When You Don\'t Have All the': ('Thinking in Bets: Making Smarter Decisions When You Don\'t Have All the Facts', 'Annie Duke'),
                    'Powerful': ('Powerful', 'Joseph Murphy'),
                    'You Look Like a Thing and I Love You: How Artificial Intelligence Works and Why It\'s Making the World a': ('You Look Like a Thing and I Love You: How Artificial Intelligence Works and Why It\'s Making the World a Weirder Place', 'Janelle Shane'),
                    'Milliano Scaling People: Tactics for Management and Company Building': ('Scaling People: Tactics for Management and Company Building', 'Claire Hughes Johnson'),
                    'Milliano Bird by Bird: Some Instructions on Writing and': ('Bird by Bird: Some Instructions on Writing and Life', 'Anne Lamott'),
                    'Computing Taste: Algorithms and the Makers of': ('Computing Taste: Algorithms and the Makers of Music Recommendation', 'Nick Seaver'),
                    'Ancillary': ('Ancillary Justice', 'Ann Leckie'),
                    'Cool Gray City of Love: 49 Views of': ('Cool Gray City of Love: 49 Views of San Francisco', 'Gary Kamiya'),
                    'Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations Nicole Forsgren PhD, Jez Humble,': ('Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations', 'Nicole Forsgren PhD, Jez Humble, Gene Kim'),
                    'Connect: Building Exceptional Relationships with Family, Friends and Colleagues David L. Bradford,': ('Connect: Building Exceptional Relationships with Family, Friends and Colleagues', 'David L. Bradford, Carole Robin'),
                    'Happy': ('Happy Money', 'Elizabeth Dunn'),
                    'Die with': ('Die with Zero', 'Bill Perkins'),
                    'The Score Takes Care of Itself: My Philosophy of Leadership Walsh,': ('The Score Takes Care of Itself: My Philosophy of Leadership', 'Bill Walsh'),
                    'Stumbling on': ('Stumbling on Happiness', 'Daniel Todd Gilbert'),
                    'The Art of': ('The Art of Thinking Clearly', 'Rolf Dobelli'),
                    'Outcomes': ('Outcomes Over Output', 'Joshua Seiden'),
                    'Present': ('Present Yourself', 'Hans Christian Andersen'),
                    'Decision': ('Decision Stack', 'Ron Stack'),
                    'Energy and Civilization: A': ('Energy and Civilization: A History', 'Vaclav Smil'),
                    'An Elegant Puzzle: Systems of': ('An Elegant Puzzle: Systems of Engineering Management', 'Will Larson'),
                    'Giovanni\'s': ('Giovanni\'s Room', 'Oscar Wilde'),
                    'This Is How They Tell Me the World Ends: The Cyberweapons Arms Race Nicole': ('This Is How They Tell Me the World Ends: The Cyberweapons Arms Race', 'Nicole Perlroth'),
                    'You Are Here: Discovering the Magic of the Present Moment Sherab Chodzin Kohn, Thích Nhất': ('You Are Here: Discovering the Magic of the Present Moment', 'Sherab Chodzin Kohn, Thích Nhất Hạnh'),
                    'Predictably Irrational: The Hidden Forces That Shape Our Decisions Dan': ('Predictably Irrational: The Hidden Forces That Shape Our Decisions', 'Dan Ariely'),
                    'The Darwin Economy: Liberty, Competition, and the Common Good Robert H.': ('The Darwin Economy: Liberty, Competition, and the Common Good', 'Robert H. Frank'),
                    'The Tipping Point: How Little Things Can Make a': ('The Tipping Point: How Little Things Can Make a Big Difference', 'Malcolm Gladwell'),
                    'All The Light We Cannot See Anthony': ('All The Light We Cannot See', 'Anthony Doerr'),
                    'Salva Make It So: Interaction Design Lessons from Science Fiction Nathan Shedroff,': ('Make It So: Interaction Design Lessons from Science Fiction', 'Nathan Shedroff, Christopher Noessel'),
                    'The Splendid and the Vile: A Saga of Churchill, Family, and Defiance During the Blitz Book': ('The Splendid and the Vile: A Saga of Churchill, Family, and Defiance During the Blitz', 'Erik Larson'),
                    'It Was the Best of Sentences, It Was the Worst of': ('It Was the Best of Sentences, It Was the Worst of Sentences', 'June Casagrande'),
                    'Better Business Writing by Harvard Business Review Bryan A.': ('Better Business Writing by Harvard Business Review', 'Bryan A. Garner'),
                    'Understanding Comics Scott': ('Understanding Comics', 'Scott McCloud'),
                    '10 New Rules for Women at': ('10 New Rules for Women at Work', 'Deb Liu'),
                    '15 Commitments of Conscious Leadership': ('The 15 Commitments of Conscious Leadership', 'Jim Dethmer'),
                    'Mastering': ('Mastering Leadership', 'Bob Anderson'),
                    'Little Bets: How Breakthrough Ideas Emerge from': ('Little Bets: How Breakthrough Ideas Emerge from Small Discoveries', 'Peter Sims'),
                    'Getting': ('Getting Things Done', 'David Allen'),
                }
                
                # Apply corrections if this title matches a known problematic entry
                if title in corrections:
                    corrected_title, corrected_author = corrections[title]
                    title = corrected_title
                    author = corrected_author
                
                found_books.add(title)
                logger.info(f"Found {section_type} book: '{title}' by '{author}' (count: {count})")
                
                books.append({
                    'title': title,
                    'author': author,
                    'count': count,
                    'source': "lenny's podcast"
                })
    
    return books


def parse_episode_books(text: str) -> List[Dict]:
    """
    Parse the episode-by-episode book recommendations.
    
    Args:
        text: The episode books text section
    
    Returns:
        List[Dict]: List of book dictionaries
    """
    books = []
    
    # The episode section has a different format: "Date Guest Title Author"
    # Example: "20-Jul-25 Ben Mann Replacing Guilt: Minding Our Way Nate Soares"
    # The text is all on one line, so we need to parse it differently
    
    # Look for date patterns (DD-MMM-YY) to find episode entries
    import re
    date_pattern = r'\d{2}-[A-Za-z]{3}-\d{2}'
    date_matches = list(re.finditer(date_pattern, text))
    
    found_books = set()
    
    for i, match in enumerate(date_matches):
        date_start = match.start()
        date_end = match.end()
        
        # Get the text from this date to the next date (or end of text)
        if i + 1 < len(date_matches):
            next_date_start = date_matches[i + 1].start()
            episode_text = text[date_start:next_date_start].strip()
        else:
            episode_text = text[date_start:].strip()
        
        # Parse the episode entry: "Date Guest Title Author"
        parts = episode_text.split()
        if len(parts) >= 4:
            # Skip the date and guest name, look for title and author
            # Format: Date Guest Title Author
            
            # Comprehensive list of known authors for episode books
            known_authors = [
                'Nate Soares', 'Richard Rumelt', 'Brian Christian', 'Leo Tolstoy', 'George Saunders',
                'Iain McGilchrist', 'Felix Dennis', 'Eric Greitens', 'Andrew Roberts', 'Yuval Noah Harari',
                'Peter Frankopan', 'Candice Millard', 'John Steinbeck', 'Ernest Hemingway', 'Robert Bringhurst',
                'Robert M Pirsig', 'Robert Grudin', 'Homer', 'M. Mitchell Waldrop', 'Frank Herbert',
                'Walter Isaacson', 'Elon Musk', 'April Dunford', 'Madeline Miller', 'Tom Rath',
                'Sahil Bloom', 'Max S. Bennett', 'Keith Johnstone', 'William Shakespeare', 'Sebastian Mallaby',
                'F. Scott Fitzgerald', 'Reed Hastings', 'Erin Meyer', 'Marshall B. Rosenberg PhD',
                'Ethan Mollick', 'Peter Zeihan', 'Mark Robichaux', 'David Rock', 'Mihaly Csikszentmihalyi',
                'Joseph Campbell', 'Neal Gabler', 'Ed Catmull', 'Amy Wallace', 'Tom Kelley', 'Jonathan Littman',
                'Andy Weir', 'Dennis E. Taylor', 'Michael A. Singer', 'Joseph Nguyen', 'James Richardson',
                'W. Timothy Gallwey', 'Abraham Verghese', 'Madeline Miller', 'Kim Scott', 'Ichak Kalderon Adizes',
                'Eric Ries', 'Michael Lewis', 'Marshall Brain', 'John Brooks', 'Taylor Kay Phillips',
                'Ernest K. Gann', 'Danny Meyer', 'Bill Bryson', 'Bill Burnett', 'Claude Hopkins',
                'Roger Bannister', 'Dan Davies', 'Jonathan Haidt', 'Chip Heath', 'Dan Heath',
                'Erik Larson', 'Rick Rubin', 'Cyrus Highsmith', 'Patti Smith', 'Siddhartha Mukherjee',
                'Brandon Sanderson', 'Isaac Asimov', 'Gay Hendricks', 'Andrew S. Grove', 'Marty Cagan',
                'Tony Fadell', 'Don Norman', 'Ben Horowitz', 'David Epstein', 'Donella H. Meadows',
                'A.G. Lafley', 'Roger L. Martin', 'Robert Greene', 'Min Jin Lee', 'Jim Dethmer',
                'Diana Chapman', 'Kaley Klemp', 'Daniel Kahneman', 'Elad Gil', 'Claire Hughes Johnson',
                'Dale Carnegie', 'Cixin Liu', 'Robert B. Cialdini', 'Geoffrey A. Moore', 'Eliyahu M Goldratt',
                'Jeff Cox', 'Nir Eyal', 'April Dunford', 'Colin Bryar', 'Bill Carr', 'Bill Burnett',
                'Eric Ries', 'Kim Scott', 'Reed Hastings', 'Erin Meyer', 'Andy Weir', 'Brandon Sanderson',
                'Sebastian Mallaby', 'F. Scott Fitzgerald', 'Marshall B. Rosenberg', 'Peter Zeihan',
                'Mark Robichaux', 'David Rock', 'Mihaly Csikszentmihalyi', 'Joseph Campbell', 'Neal Gabler',
                'Ed Catmull', 'Amy Wallace', 'Tom Kelley', 'Jonathan Littman', 'Dennis E. Taylor',
                'Michael A. Singer', 'Joseph Nguyen', 'James Richardson', 'W. Timothy Gallwey',
                'Abraham Verghese', 'Madeline Miller', 'Ichak Kalderon Adizes', 'Michael Lewis',
                'Marshall Brain', 'John Brooks', 'Taylor Kay Phillips', 'Ernest K. Gann', 'Danny Meyer',
                'Bill Bryson', 'Claude Hopkins', 'Roger Bannister', 'Dan Davies', 'Jonathan Haidt',
                'Chip Heath', 'Dan Heath', 'Erik Larson', 'Rick Rubin', 'Cyrus Highsmith', 'Patti Smith',
                'Siddhartha Mukherjee', 'Isaac Asimov', 'Gay Hendricks'
            ]
            
            # Try to find author in the episode text using a more sophisticated approach
            title = episode_text
            author = ""
            
            # First, try to find exact matches with known authors
            for author_name in known_authors:
                if author_name in episode_text:
                    # Find where author starts
                    author_start = episode_text.find(author_name)
                    if author_start > 0:
                        # Extract title (everything after the guest name but before the author)
                        # First, find where the guest name ends (after the date)
                        # Date format: "20-Jul-25 Ben Mann" -> skip first 3 parts
                        date_parts = episode_text.split()
                        if len(date_parts) >= 3:
                            # Skip date and guest name (first 3 parts)
                            title_start = len(' '.join(date_parts[:3])) + 1
                            potential_title = episode_text[title_start:author_start].strip()
                            # Make sure we're not cutting off part of the title
                            if potential_title and not potential_title.endswith(' ' + author_name.split()[0]):
                                title = potential_title
                                author = episode_text[author_start:].strip()
                                break
            
            # If we didn't find a known author, try pattern matching
            if not author:
                # Extract the part after date and guest name
                date_parts = episode_text.split()
                if len(date_parts) >= 4:
                    # Skip date and guest name (first 3 parts)
                    book_text = ' '.join(date_parts[3:])
                    
                    # Look for patterns like "Title by Author" or "Title Author"
                    title_patterns = [
                        r'^(.+?)\s+by\s+(.+)$',  # "Title by Author"
                        r'^(.+?)\s+([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)$',  # "Title Author" (capitalized name)
                        r'^(.+?)\s+([A-Z]\.[A-Z]?\s+[A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)$',  # "Title A. Author"
                    ]
                    
                    for pattern in title_patterns:
                        match = re.match(pattern, book_text.strip())
                        if match:
                            potential_title = match.group(1).strip()
                            potential_author = match.group(2).strip()
                            
                            # Validate that the potential author looks like a real name
                            if (len(potential_author.split()) >= 1 and 
                                len(potential_author.split()) <= 4 and
                                all(word[0].isupper() for word in potential_author.split() if word)):
                                title = potential_title
                                author = potential_author
                                break
            
            # If still no author found, try a smarter fallback
            if not author and len(parts) >= 4:
                # Look for the last capitalized word or words that might be an author
                book_words = parts[3:]  # Skip date and guest name
                for i in range(len(book_words) - 1, 0, -1):
                    potential_author = ' '.join(book_words[i:])
                    potential_title = ' '.join(book_words[:i])
                    
                    # Check if potential author looks like a name
                    if (len(potential_author.split()) <= 4 and 
                        all(word[0].isupper() for word in potential_author.split() if word) and
                        len(potential_title) > 10):  # Make sure title is substantial
                        title = potential_title
                        author = potential_author
                        break
            
            # Clean up
            title = title.strip()
            author = author.strip()
            
            # Skip if this looks like navigation or is too short
            skip_words = ['episodes', 'books', 'movies', 'tv', 'shows', 'products', 'interview', 'questions', 
                         'recommended', 'top', 'title', 'author', 'count', 'back', 'to', 'top', 'lenny', 
                         'lightning', 'round', 'toggle', 'menu', 'all recommended books by episode', 
                         'date guest title author']
            if any(skip_word in title.lower() for skip_word in skip_words):
                continue
            
            # Additional validation and corrections
            if (title and len(title) > 3 and 
                author and len(author) > 1 and 
                title not in found_books and
                not author.lower() in ['from', 'to', 'the', 'and', 'or', 'but', 'in', 'on', 'at']):
                
                # Specific corrections for known problematic entries (same as in parse_book_section)
                corrections = {
                    'Brandon': ('Brandon Sanderson Books', 'Brandon Sanderson'),
                    'Nickels The 15 Commitments of Conscious Leadership: A New Paradigm for Sustainable Success': ('The 15 Commitments of Conscious Leadership: A New Paradigm for Sustainable Success', 'Jim Dethmer, Diana Chapman, Kaley Klemp'),
                    'The Origin of Wealth: The Radical Remaking of Economics and What it Means for Business and Society Eric D.': ('The Origin of Wealth: The Radical Remaking of Economics and What it Means for Business and Society', 'Eric D. Beinhocker'),
                    'Misbehaving: The Making of Behavioral Economics Richard H.': ('Misbehaving: The Making of Behavioral Economics', 'Richard H. Thaler'),
                    'Small Data: The Tiny Clues That Uncover Huge Trends Martin': ('Small Data: The Tiny Clues That Uncover Huge Trends', 'Martin Lindstrom'),
                    'What Got You Here Won\'t Get You There: How Successful People Become Even More Successful Marshall Goldsmith,': ('What Got You Here Won\'t Get You There: How Successful People Become Even More Successful', 'Marshall Goldsmith, Mark Reiter'),
                    'When Things Fall Apart: Heart Advice for': ('When Things Fall Apart: Heart Advice for Difficult Times', 'Pema Chodron'),
                    'Mindset: The New Psychology of Success Carol S.': ('Mindset: The New Psychology of Success', 'Carol S. Dweck'),
                    'The Conversation: How Seeking and Speaking the Truth About Racism Can Radically Transform Individuals and Organizations IRobert': ('The Conversation: How Seeking and Speaking the Truth About Racism Can Radically Transform Individuals and Organizations', 'Robert Livingston'),
                    'The Paper Menagerie and': ('The Paper Menagerie and Other Stories', 'Ken Liu'),
                    'Never Split the Difference: Negotiating As If Your Life Depended On It Chris Voss,': ('Never Split the Difference: Negotiating As If Your Life Depended On It', 'Chris Voss, Tahl Raz'),
                    'The Person and the Situation: Perspectives of Social Psychology Lee Ross, Richard E.': ('The Person and the Situation: Perspectives of Social Psychology', 'Lee Ross, Richard E. Nisbett'),
                    'Cambridge Fundamentals of Neuroscience in': ('Cambridge Fundamentals of Neuroscience in Psychology', 'Various Authors'),
                    'The Black Swan: The Impact of the Highly Improbable Nassim Nicholas': ('The Black Swan: The Impact of the Highly Improbable', 'Nassim Nicholas Taleb'),
                    'Great by Choice: Uncertainty, Chaos, and Luck--Why Some Thrive Despite Them All Jim Collins, Morten T.': ('Great by Choice: Uncertainty, Chaos, and Luck--Why Some Thrive Despite Them All', 'Jim Collins, Morten T. Hansen'),
                    '7 Powers: The Foundations of': ('7 Powers: The Foundations of Business Strategy', 'Hamilton Helmer'),
                    'Jr. Chase, Chance, and Creativity: The Lucky Art of Novelty James H.': ('Chase, Chance, and Creativity: The Lucky Art of Novelty', 'James H. Austin'),
                    'Jr. The Laws of Human Nature': ('The Laws of Human Nature', 'Robert Greene'),
                    'Life Keith Richards,': ('Life', 'Keith Richards, James Fox'),
                    'My Name Is Barbra Barbra': ('My Name Is Barbra', 'Barbra Streisand'),
                    'Who: A Method for': ('Who: A Method for Hiring', 'Guff Smert'),
                    'Living with the Earth, Volume 1: Permaculture, Ecoculture: Inspired by Nature Charles Hervé-Gruyer, Perrine': ('Living with the Earth, Volume 1: Permaculture, Ecoculture: Inspired by Nature', 'Charles Hervé-Gruyer, Perrine Hervé-Gruyer'),
                    'That Will Never Work: The Birth of Netflix and the Amazing Life of an': ('That Will Never Work: The Birth of Netflix and the Amazing Life of an Idea', 'Marc Randolph'),
                    'Deep Work: Rules for Focused Success in a': ('Deep Work: Rules for Focused Success in a Distracted World', 'Cal Newport'),
                    'Originals: How Non-Conformists Move the': ('Originals: How Non-Conformists Move the World', 'Adam Grant'),
                    'Reamde: A': ('Reamde: A Novel', 'Neal Stephenson'),
                    'Essentialism: The Disciplined Pursuit of Less Greg': ('Essentialism: The Disciplined Pursuit of Less', 'Greg McKeown'),
                    'The Mission Critical Core/Context Model For Product Managers Nils': ('The Mission Critical Core/Context Model For Product Managers', 'Nils Davis'),
                    'What\'s Our Problem?: A Self-Help Book for': ('What\'s Our Problem?: A Self-Help Book for Societies', 'Tim Urban'),
                    'Bosworth The Dream Machine': ('The Dream Machine', 'M. Mitchell Waldrop'),
                    'What I Talk About When I Talk About Running: A': ('What I Talk About When I Talk About Running: A Memoir', 'Haruki Murakami'),
                    'The One World Schoolhouse Salman': ('The One World Schoolhouse', 'Salman Khan'),
                    'Why We Sleep: Unlocking the Power of Sleep and': ('Why We Sleep: Unlocking the Power of Sleep and Dreams', 'Matthew Walker'),
                    'Consolations: The Solace, Nourishment and Underlying Meaning of': ('Consolations: The Solace, Nourishment and Underlying Meaning of Everyday Words', 'David Whyte'),
                    'Recapture the Rapture: Rethinking God, Sex, and Death in a World That\'s Lost Its Mind Jamie': ('Recapture the Rapture: Rethinking God, Sex, and Death in a World That\'s Lost Its Mind', 'Jamie Wheal'),
                    'Creating Intelligent Teams Anne; Fridjhon Marita Rød,': ('Creating Intelligent Teams', 'Anne Fridjhon, Marita Rød'),
                    'Invisible': ('Invisible Cities', 'Italo Calvino'),
                    'The ALL NEW Don\'t Think of an Elephant!: Know Your Values and Frame the': ('The ALL NEW Don\'t Think of an Elephant!: Know Your Values and Frame the Debate', 'George Lakoff'),
                    'Bad Leadership: What It Is, How It Happens, Why It Matters Barbara': ('Bad Leadership: What It Is, How It Happens, Why It Matters', 'Barbara Kellerman'),
                    'Demon': ('Demon Copperhead', 'Barbara Kingsolver'),
                    'Alchemy: The Dark Art and Curious Science of Creating Magic in Brands, Business, and': ('Alchemy: The Dark Art and Curious Science of Creating Magic in Brands, Business, and Life', 'Rory Sutherland'),
                    'The Experience Machine: How Our Minds Predict and': ('The Experience Machine: How Our Minds Predict and Shape Reality', 'Andy Clark'),
                    'The Five Temptations of a CEO: A': ('The Five Temptations of a CEO: A Leadership Fable', 'Patrick Lencioni'),
                    'The Five Dysfunctions of a Team: A': ('The Five Dysfunctions of a Team: A Leadership Fable', 'Patrick Lencioni'),
                    'Hell Yeah or No: What\'s': ('Hell Yeah or No: What\'s Worth Doing', 'Derek Sivers'),
                    'Poor Charlie\'s Almanack: The Essential Wit and Wisdom of Charles T. Munger Peter D.': ('Poor Charlie\'s Almanack: The Essential Wit and Wisdom of Charles T. Munger', 'Peter D. Kaufman'),
                    'In the Heart of the Sea: The Tragedy of the': ('In the Heart of the Sea: The Tragedy of the Whaleship Essex', 'Nathaniel Philbrick'),
                    'The Tale of Despereaux Kate': ('The Tale of Despereaux', 'Kate DiCamillo'),
                    'I\'ll Show Myself Out: Essays on Midlife and': ('I\'ll Show Myself Out: Essays on Midlife and Motherhood', 'Jessi Klein'),
                    'You\'ll Grow Out of': ('You\'ll Grow Out of It', 'Jessi Klein'),
                    'How Brands Grow: What Marketers Don\'t': ('How Brands Grow: What Marketers Don\'t Know', 'Byron Sharp'),
                    'The God of': ('The God of Small Things', 'Arundhati Roy'),
                    'A Fire Upon the': ('A Fire Upon the Deep', 'Vernor Vinge'),
                    'Wanting: The Power of Mimetic Desire in': ('Wanting: The Power of Mimetic Desire in Everyday Life', 'Luke Burgis'),
                    'and Denise Tilles The Art of Action: How Leaders Close the Gaps between Plans, Actions, and': ('The Art of Action: How Leaders Close the Gaps between Plans, Actions, and Results', 'Stephen Bungay'),
                    'and Denise Tilles Escaping the Build Trap: How Effective Product Management Creates Real Value Melissa': ('Escaping the Build Trap: How Effective Product Management Creates Real Value', 'Melissa Perri'),
                    'Four Thousand Weeks: Time Management for': ('Four Thousand Weeks: Time Management for Mortals', 'Oliver Burkeman'),
                    'Thinking in Bets: Making Smarter Decisions When You Don\'t Have All the': ('Thinking in Bets: Making Smarter Decisions When You Don\'t Have All the Facts', 'Annie Duke'),
                    'The Practice of Management Peter F.': ('The Practice of Management', 'Peter F. Drucker'),
                    'A Gentleman in': ('A Gentleman in Moscow', 'Amor Towles'),
                    'The Grace of': ('The Grace of Kings', 'Ken Liu'),
                    'Principles: Life and': ('Principles: Life and Work', 'Ray Dalio'),
                    'The Challenger Sale: Taking Control of the': ('The Challenger Sale: Taking Control of the Customer Conversation', 'Matthew Dixon'),
                    'Positioning: The Battle for Your Mind Al Ries,': ('Positioning: The Battle for Your Mind', 'Al Ries, Jack Trout'),
                    'The Design of Everyday Things Donald A.': ('The Design of Everyday Things', 'Donald A. Norman'),
                    'The Boy, the Mole, the Fox and the': ('The Boy, the Mole, the Fox and the Horse', 'Charlie Mackesy'),
                    'The Timeless Way of': ('The Timeless Way of Building', 'Christopher Alexander'),
                    'Good Strategy/Bad Strategy: The Difference and Why It Matters Richard P.': ('Good Strategy/Bad Strategy: The Difference and Why It Matters', 'Richard P. Rumelt'),
                    'Children of Time H. G.': ('Children of Time', 'H. G. Wells'),
                    'Crime and': ('Crime and Punishment', 'Fyodor Dostoevsky'),
                    'Midnight\'s': ('Midnight\'s Children', 'Salman Rushdie'),
                    'Illusions: The Adventures of a': ('Illusions: The Adventures of a Reluctant Messiah', 'Richard Bach'),
                    'What They Don\'t Teach You at Harvard Business School: Notes from a Street-Smart Executive Mark H.': ('What They Don\'t Teach You at Harvard Business School: Notes from a Street-Smart Executive', 'Mark H. McCormack'),
                    'The Halo Effect: . . . and the Eight Other Business Delusions That Deceive Managers Phil Rosenzweig,': ('The Halo Effect: . . . and the Eight Other Business Delusions That Deceive Managers', 'Phil Rosenzweig, Jim Manchester'),
                    'Team of Teams: New Rules of Engagement for a Complex World Stanley A. McChrystal, Tantum Collins, David Silverman,': ('Team of Teams: New Rules of Engagement for a Complex World', 'Stanley A. McChrystal, Tantum Collins, David Silverman, Chris Fussell'),
                    'Let My People Go Surfing: The Education of a': ('Let My People Go Surfing: The Education of a Reluctant Businessman', 'Yvon Chouinard'),
                    'The Power Broker: Robert Moses and the Fall of New York Robert A.': ('The Power Broker: Robert Moses and the Fall of New York', 'Robert A. Caro'),
                    'Shape': ('Shape Up', 'Ryan Singer'),
                    'Kindred Octavia E.': ('Kindred', 'Octavia E. Butler'),
                    'A Wrinkle in Time Madeleine': ('A Wrinkle in Time', 'Madeleine L\'Engle'),
                    'The Art and Adventure of Leadership Warren G.': ('The Art and Adventure of Leadership', 'Warren G. Bennis'),
                    'Everybody Lies: Big Data, New Data, and What the Internet Can Tell Us About Who We Really Are Seth': ('Everybody Lies: Big Data, New Data, and What the Internet Can Tell Us About Who We Really Are', 'Seth Stephens-Davidowitz'),
                    'When Breath Becomes Air Paul': ('When Breath Becomes Air', 'Paul Kalanithi'),
                    'Ender\'s': ('Ender\'s Game', 'Orson Scott Card'),
                    'Calling Bullshit Carl T. Bergstrom, Jevin D.': ('Calling Bullshit', 'Carl T. Bergstrom, Jevin D. West'),
                    'Mistakes were made, but not by me Carol Tavris,': ('Mistakes were made, but not by me', 'Carol Tavris, Elliot Aronson'),
                    'Radical': ('Radical Candor', 'Kim Malone Scott'),
                    'Leadership: In Turbulent Times Doris Kearns': ('Leadership: In Turbulent Times', 'Doris Kearns Goodwin'),
                    'Thinking in Systems Donella Meadows,': ('Thinking in Systems', 'Donella Meadows, Diana Wright'),
                    'Range: Why Generalists Triumph in a Specialized World David J.': ('Range: Why Generalists Triumph in a Specialized World', 'David J. Epstein'),
                    'Quiet': ('Quiet', 'Erich Maria Remarque'),
                    'The Snowball: Warren Buffett and the Business of': ('The Snowball: Warren Buffett and the Business of Life', 'Alice Schroeder'),
                    'Never Split the Difference: Negotiating as If Your Life Depended on It Chris Voss,': ('Never Split the Difference: Negotiating as If Your Life Depended on It', 'Chris Voss, Tahl Raz'),
                    'Spark: The Revolutionary New Science of Exercise and the Brain John J.': ('Spark: The Revolutionary New Science of Exercise and the Brain', 'John J. Ratey'),
                    'Smart Brevity: The Power of Saying More with Less Mike Allen, Jim VandeHei,': ('Smart Brevity: The Power of Saying More with Less', 'Mike Allen, Jim VandeHei, Roy Schwartz'),
                    'Outlive: The Science and Art of Longevity Peter Attia,': ('Outlive: The Science and Art of Longevity', 'Peter Attia, Bill Gifford'),
                    'The War of Art: Break Through the Blocks and Win Your Inner Creative Battles Steven': ('The War of Art: Break Through the Blocks and Win Your Inner Creative Battles', 'Steven Pressfield'),
                    'Leadership and Self-Deception: Getting Out of the': ('Leadership and Self-Deception: Getting Out of the Box', 'The Arbinger Institute'),
                    'The Writer\'s': ('The Writer\'s Journey', 'Christopher Vogler'),
                    'Out of': ('Out of Sheer Rage', 'Geoff Dyer'),
                    'm 7 Powers: The Foundations of': ('7 Powers: The Foundations of Business Strategy', 'Hamilton Helmer'),
                    'm The Mystery of the Aleph: Mathematics, the Kabbalah, and the Search for Infinity Amir D.': ('The Mystery of the Aleph: Mathematics, the Kabbalah, and the Search for Infinity', 'Amir D. Aczel'),
                    'm Something Deeply Hidden: Quantum Worlds and the Emergence of Spacetime Sean M.': ('Something Deeply Hidden: Quantum Worlds and the Emergence of Spacetime', 'Sean M. Carroll'),
                    'm Helgoland: Making Sense of the': ('Helgoland: Making Sense of the Quantum Revolution', 'Carlo Rovelli'),
                    'm The Beginning of Infinity: Explanations That Transform the World Deutsch,': ('The Beginning of Infinity: Explanations That Transform the World', 'David Deutsch'),
                    'm The Fabric of Reality: The Science of Parallel Universes—and Its Implications David Deutsch,': ('The Fabric of Reality: The Science of Parallel Universes—and Its Implications', 'David Deutsch, Walter Dixon'),
                    'm The Case Against Reality: Why Evolution Hid the Truth from': ('The Case Against Reality: Why Evolution Hid the Truth from Our Eyes', 'Donald Hoffman'),
                    'm Gödel\'s Proof Ernest Nagel, James R. Newman, Douglas R.': ('Gödel\'s Proof', 'Ernest Nagel, James R. Newman, Douglas R. Hofstadter'),
                    'm The Demon in the Machine: How Hidden Webs of Information Are Solving the Mystery of Life Davies,': ('The Demon in the Machine: How Hidden Webs of Information Are Solving the Mystery of Life', 'Paul Davies'),
                    'Children of': ('Children of Time', 'Adrian Tchaikovsky'),
                    'Fire in the': ('Fire in the Deep', 'Robert Joseph Miller'),
                    'American': ('American Kingpin', 'Nick Bilton'),
                    'Never Split the Difference: Negotiating As If Your Life Depended on It Chris Voss,': ('Never Split the Difference: Negotiating As If Your Life Depended on It', 'Chris Voss, Tahl Raz'),
                    'Amp It Up: Leading for Hypergrowth by Raising Expectations, Increasing Urgency, and': ('Amp It Up: Leading for Hypergrowth by Raising Expectations, Increasing Urgency, and Elevating Intensity', 'Frank Slootman'),
                    'Rekhi Influence: The Psychology of Persuasion': ('Influence: The Psychology of Persuasion', 'Robert B. Cialdini'),
                    'Great by Choice Jim Collins, Morten T.': ('Great by Choice', 'Jim Collins, Morten T. Hansen'),
                    'Metabolical: The Lure and the Lies of Processed Food, Nutrition, and Modern Medicine Robert H': ('Metabolical: The Lure and the Lies of Processed Food, Nutrition, and Modern Medicine', 'Robert H. Lustig'),
                    'Purple Cow: Transform Your Business': ('Purple Cow: Transform Your Business by Being Remarkable', 'Seth Godin'),
                    'Expecting': ('Expecting Better', 'Emily Oster'),
                    'You Will Hear Thunder Anna': ('You Will Hear Thunder', 'Anna Akhmatova'),
                    'The Fire Next Time James': ('The Fire Next Time', 'James Baldwin'),
                    '硅谷增长黑客实战笔记': ('硅谷增长黑客实战笔记', 'Hila Qu'),
                    'Someday': ('Someday', 'Colleen Hoover'),
                    'Meservey Gates of Fire: An Epic Novel of the Battle of': ('Gates of Fire: An Epic Novel of the Battle of Thermopylae', 'Steven Pressfield'),
                    'Harold and the': ('Harold and the Purple Crayon', 'Crockett Johnson'),
                    'Seeing Is Forgetting the Name of the Thing One Sees Lawrence': ('Seeing Is Forgetting the Name of the Thing One Sees', 'Lawrence Wechsler'),
                    'The Fearless Organization: Creating Psychological Safety in the Workplace for Learning, Innovation, and Growth Amy C.': ('The Fearless Organization: Creating Psychological Safety in the Workplace for Learning, Innovation, and Growth', 'Amy C. Edmondson'),
                    'Cloud': ('Cloud Atlas', 'David Mitchell'),
                    'mer The 100% Solution: A Plan for Solving Climate Change Solomon': ('The 100% Solution: A Plan for Solving Climate Change', 'Solomon Goldstein-Rose'),
                    'Mindfulness in Plain English Bhante H.': ('Mindfulness in Plain English', 'Bhante H. Gunaratana'),
                    'The New Product Development Game P.Eng Steven James Keays': ('The New Product Development Game', 'P.Eng Steven James Keays M.A.Sc.'),
                    'Thinking in Bets: Making Smarter Decisions When You Don\'t Have All the': ('Thinking in Bets: Making Smarter Decisions When You Don\'t Have All the Facts', 'Annie Duke'),
                    'Powerful': ('Powerful', 'Joseph Murphy'),
                    'You Look Like a Thing and I Love You: How Artificial Intelligence Works and Why It\'s Making the World a': ('You Look Like a Thing and I Love You: How Artificial Intelligence Works and Why It\'s Making the World a Weirder Place', 'Janelle Shane'),
                    'Milliano Scaling People: Tactics for Management and Company Building': ('Scaling People: Tactics for Management and Company Building', 'Claire Hughes Johnson'),
                    'Milliano Bird by Bird: Some Instructions on Writing and': ('Bird by Bird: Some Instructions on Writing and Life', 'Anne Lamott'),
                    'Computing Taste: Algorithms and the Makers of': ('Computing Taste: Algorithms and the Makers of Music Recommendation', 'Nick Seaver'),
                    'Ancillary': ('Ancillary Justice', 'Ann Leckie'),
                    'Cool Gray City of Love: 49 Views of': ('Cool Gray City of Love: 49 Views of San Francisco', 'Gary Kamiya'),
                    'Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations Nicole Forsgren PhD, Jez Humble,': ('Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations', 'Nicole Forsgren PhD, Jez Humble, Gene Kim'),
                    'Connect: Building Exceptional Relationships with Family, Friends and Colleagues David L. Bradford,': ('Connect: Building Exceptional Relationships with Family, Friends and Colleagues', 'David L. Bradford, Carole Robin'),
                    'Happy': ('Happy Money', 'Elizabeth Dunn'),
                    'Die with': ('Die with Zero', 'Bill Perkins'),
                    'The Score Takes Care of Itself: My Philosophy of Leadership Walsh,': ('The Score Takes Care of Itself: My Philosophy of Leadership', 'Bill Walsh'),
                    'Stumbling on': ('Stumbling on Happiness', 'Daniel Todd Gilbert'),
                    'The Art of': ('The Art of Thinking Clearly', 'Rolf Dobelli'),
                    'Outcomes': ('Outcomes Over Output', 'Joshua Seiden'),
                    'Present': ('Present Yourself', 'Hans Christian Andersen'),
                    'Decision': ('Decision Stack', 'Ron Stack'),
                    'Energy and Civilization: A': ('Energy and Civilization: A History', 'Vaclav Smil'),
                    'An Elegant Puzzle: Systems of': ('An Elegant Puzzle: Systems of Engineering Management', 'Will Larson'),
                    'Giovanni\'s': ('Giovanni\'s Room', 'Oscar Wilde'),
                    'This Is How They Tell Me the World Ends: The Cyberweapons Arms Race Nicole': ('This Is How They Tell Me the World Ends: The Cyberweapons Arms Race', 'Nicole Perlroth'),
                    'You Are Here: Discovering the Magic of the Present Moment Sherab Chodzin Kohn, Thích Nhất': ('You Are Here: Discovering the Magic of the Present Moment', 'Sherab Chodzin Kohn, Thích Nhất Hạnh'),
                    'Predictably Irrational: The Hidden Forces That Shape Our Decisions Dan': ('Predictably Irrational: The Hidden Forces That Shape Our Decisions', 'Dan Ariely'),
                    'The Darwin Economy: Liberty, Competition, and the Common Good Robert H.': ('The Darwin Economy: Liberty, Competition, and the Common Good', 'Robert H. Frank'),
                    'The Tipping Point: How Little Things Can Make a': ('The Tipping Point: How Little Things Can Make a Big Difference', 'Malcolm Gladwell'),
                    'All The Light We Cannot See Anthony': ('All The Light We Cannot See', 'Anthony Doerr'),
                    'Salva Make It So: Interaction Design Lessons from Science Fiction Nathan Shedroff,': ('Make It So: Interaction Design Lessons from Science Fiction', 'Nathan Shedroff, Christopher Noessel'),
                    'The Splendid and the Vile: A Saga of Churchill, Family, and Defiance During the Blitz Book': ('The Splendid and the Vile: A Saga of Churchill, Family, and Defiance During the Blitz', 'Erik Larson'),
                    'It Was the Best of Sentences, It Was the Worst of': ('It Was the Best of Sentences, It Was the Worst of Sentences', 'June Casagrande'),
                    'Better Business Writing by Harvard Business Review Bryan A.': ('Better Business Writing by Harvard Business Review', 'Bryan A. Garner'),
                    'Understanding Comics Scott': ('Understanding Comics', 'Scott McCloud'),
                    '10 New Rules for Women at': ('10 New Rules for Women at Work', 'Deb Liu'),
                    '15 Commitments of Conscious Leadership': ('The 15 Commitments of Conscious Leadership', 'Jim Dethmer'),
                    'Mastering': ('Mastering Leadership', 'Bob Anderson'),
                    'Little Bets: How Breakthrough Ideas Emerge from': ('Little Bets: How Breakthrough Ideas Emerge from Small Discoveries', 'Peter Sims'),
                    'Getting': ('Getting Things Done', 'David Allen'),
                }
                
                # Apply corrections if this title matches a known problematic entry
                if title in corrections:
                    corrected_title, corrected_author = corrections[title]
                    title = corrected_title
                    author = corrected_author
                
                found_books.add(title)
                logger.info(f"Found episode book: '{title}' by '{author}'")
                
                books.append({
                    'title': title,
                    'author': author,
                    'count': '1',  # Episode books are mentioned once
                    'source': "lenny's podcast"
                })
    
    return books


def scrape_lennys_podcast() -> List[Dict]:
    """
    Scrape books from Lenny's Podcast book list.
    Simplified version that only extracts titles and authors.
    
    Returns:
        List[Dict]: List of book dictionaries with title and author
    """
    books = []
    url = SOURCE_URLS["lenny's podcast"]
    
    try:
        logger.info(f"Scraping Lenny's Podcast: {url}")
        
        session = requests.Session()
        session.headers.update(HEADERS)
        
        response = session.get(url, timeout=30)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # Get the full page text
        page_text = soup.get_text()
        logger.info(f"Page loaded successfully. Content length: {len(page_text)} characters")
        
        # The page content is all on one line with spaces separating books
        # Format: "Title Author Count Title Author Count ..."
        logger.info(f"Processing single line with {len(page_text)} characters")
        
        # Look for the specific pattern we can see in the text
        # Examples: "High Output Management Andrew S. Grove 8", "Inspired: How to Create Tech Products Customers Love Marty Cagan 6"
        
        # Find the start of the book list (after "Title Author Count")
        start_marker = "Title Author Count"
        start_pos = page_text.find(start_marker)
        if start_pos == -1:
            logger.warning("Could not find 'Title Author Count' marker")
            return books
        
        # Get the text after the marker, but stop at the episode list
        book_text = page_text[start_pos + len(start_marker):]
        
        # Parse the top recommended books section
        episode_marker = "All Recommended Books by Episode"
        episode_pos = book_text.find(episode_marker)
        
        if episode_pos != -1:
            top_books_text = book_text[:episode_pos]
            episode_books_text = book_text[episode_pos:]
            logger.info(f"Found book list starting at position {start_pos}, parsing both top books and episode books")
        else:
            top_books_text = book_text
            episode_books_text = ""
            logger.info(f"Found book list starting at position {start_pos}, episode list not found")
        
        # Parse top recommended books
        logger.info("Parsing top recommended books...")
        books.extend(parse_book_section(top_books_text, "top"))
        
        # Parse episode-by-episode books
        if episode_books_text:
            logger.info("Parsing episode-by-episode books...")
            books.extend(parse_episode_books(episode_books_text))
        
        # Remove duplicates based on title + author
        unique_books = []
        seen_books = set()
        
        for book in books:
            unique_key = f"{book['title']} by {book['author']}"
            if unique_key not in seen_books:
                seen_books.add(unique_key)
                unique_books.append(book)
        
        books = unique_books
        
        logger.info(f"✅ Successfully scraped {len(books)} books from Lenny's Podcast")
        
        # Log the first few books found for verification
        if books:
            logger.info("First 5 books found:")
            for i, book in enumerate(books[:5]):
                logger.info(f"  {i+1}. '{book['title']}' by '{book['author']}' (count: {book['count']})")
        
    except requests.exceptions.HTTPError as e:
        logger.error(f"HTTP Error scraping Lenny's Podcast: {e}")
    except requests.exceptions.Timeout as e:
        logger.error(f"Timeout Error scraping Lenny's Podcast: {e}")
    except requests.exceptions.RequestException as e:
        logger.error(f"Request Error scraping Lenny's Podcast: {e}")
    except Exception as e:
        logger.error(f"Unexpected Error scraping Lenny's Podcast: {e}")
    
    return books


def scrape_ken_norton() -> List[Dict]:
    """
    Scrape books from Ken Norton's blog.
    
    Returns:
        List[Dict]: List of book dictionaries with source attribution
    """
    books = []
    url = SOURCE_URLS["ken norton"]
    
    try:
        logger.info(f"Scraping Ken Norton's blog: {url}")
        
        # Add session with retry logic
        session = requests.Session()
        session.headers.update(HEADERS)
        
        response = session.get(url, timeout=30)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # More specific selectors for Ken Norton's page structure
        book_selectors = [
            'article', '.post-content', '.entry-content', '.content',
            'h1, h2, h3, h4', 'ul li, ol li', 'p strong, p b',
            '.book-recommendation', '.book-list', '.recommendation'
        ]
        
        found_books = set()
        
        for selector in book_selectors:
            elements = soup.select(selector)
            for element in elements:
                text = element.get_text().strip()
                if text and len(text) > 15 and len(text) < 200:
                    if any(keyword in text.lower() for keyword in ['product', 'management', 'business', 'startup', 'design', 'user', 'customer', 'growth', 'strategy']):
                        if text not in found_books:
                            found_books.add(text)
                            logger.info(f"Found potential book: {text}")
                            
                            # Try to extract author if present
                            author = ""
                            parent = element.parent
                            if parent:
                                parent_text = parent.get_text()
                                if " by " in parent_text:
                                    author_part = parent_text.split(" by ")[-1].split(".")[0].strip()
                                    if len(author_part) < 50:
                                        author = author_part
                            
                            books.append({
                                'title': text,
                                'author': author,
                                'summary': f"Recommended book from Ken Norton's blog: {text}",
                                'amazon_link': "",
                                'source': "ken norton"
                            })
        
        logger.info(f"Scraped {len(books)} books from Ken Norton's blog")
        
    except requests.exceptions.HTTPError as e:
        logger.error(f"HTTP Error scraping Ken Norton's blog: {e}")
        if e.response.status_code == 403:
            logger.warning("Ken Norton's blog is blocking automated access. Consider using manual book list.")
    except requests.exceptions.Timeout as e:
        logger.error(f"Timeout Error scraping Ken Norton's blog: {e}")
    except requests.exceptions.RequestException as e:
        logger.error(f"Request Error scraping Ken Norton's blog: {e}")
    except Exception as e:
        logger.error(f"Unexpected Error scraping Ken Norton's blog: {e}")
    
    return books


def scrape_mind_the_product() -> List[Dict]:
    """
    Scrape books from Mind the Product.
    
    Returns:
        List[Dict]: List of book dictionaries with source attribution
    """
    books = []
    url = SOURCE_URLS["mind the product"]
    
    try:
        logger.info(f"Scraping Mind the Product: {url}")
        
        # Add session with retry logic
        session = requests.Session()
        session.headers.update(HEADERS)
        
        response = session.get(url, timeout=30)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # More specific selectors for Mind the Product page structure
        book_selectors = [
            'article', '.post-content', '.entry-content', '.content',
            'h1, h2, h3, h4', 'ul li, ol li', 'p strong, p b',
            '.book-recommendation', '.book-list', '.recommendation'
        ]
        
        found_books = set()
        
        for selector in book_selectors:
            elements = soup.select(selector)
            for element in elements:
                text = element.get_text().strip()
                if text and len(text) > 15 and len(text) < 200:
                    if any(keyword in text.lower() for keyword in ['product', 'management', 'business', 'startup', 'design', 'user', 'customer', 'growth', 'strategy']):
                        if text not in found_books:
                            found_books.add(text)
                            logger.info(f"Found potential book: {text}")
                            
                            # Try to extract author if present
                            author = ""
                            parent = element.parent
                            if parent:
                                parent_text = parent.get_text()
                                if " by " in parent_text:
                                    author_part = parent_text.split(" by ")[-1].split(".")[0].strip()
                                    if len(author_part) < 50:
                                        author = author_part
                            
                            books.append({
                                'title': text,
                                'author': author,
                                'summary': f"Recommended book from Mind the Product: {text}",
                                'amazon_link': "",
                                'source': "mind the product"
                            })
        
        logger.info(f"Scraped {len(books)} books from Mind the Product")
        
    except requests.exceptions.HTTPError as e:
        logger.error(f"HTTP Error scraping Mind the Product: {e}")
        if e.response.status_code == 403:
            logger.warning("Mind the Product is blocking automated access. Consider using manual book list.")
    except requests.exceptions.Timeout as e:
        logger.error(f"Timeout Error scraping Mind the Product: {e}")
    except requests.exceptions.RequestException as e:
        logger.error(f"Request Error scraping Mind the Product: {e}")
    except Exception as e:
        logger.error(f"Unexpected Error scraping Mind the Product: {e}")
    
    return books


def search_amazon_book(title: str, author: str) -> Optional[str]:
    """
    Search for a book on Amazon and return the first result link.
    
    Args:
        title: Book title
        author: Book author
    
    Returns:
        Optional[str]: Amazon link if found, None otherwise
    """
    try:
        # Clean up title and author for better search
        clean_title = title.strip()
        clean_author = author.strip() if author else ""
        
        # Try different search strategies
        search_queries = []
        
        # Strategy 1: Title + Author
        if clean_author:
            search_queries.append(f"{clean_title} {clean_author}")
        
        # Strategy 2: Just title
        search_queries.append(clean_title)
        
        # Strategy 3: Title with quotes for exact match
        search_queries.append(f'"{clean_title}"')
        
        # Strategy 4: Remove common words and try again
        common_words = ['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by']
        title_words = clean_title.lower().split()
        filtered_words = [word for word in title_words if word not in common_words]
        if len(filtered_words) > 2:
            search_queries.append(' '.join(filtered_words))
        
        for search_query in search_queries:
            try:
                # URL encode the search query
                import urllib.parse
                encoded_query = urllib.parse.quote(search_query)
                search_url = f"https://www.amazon.com/s?k={encoded_query}"
                
                logger.info(f"Searching Amazon for: {search_query}")
                
                response = requests.get(search_url, headers=HEADERS, timeout=15)
                if response.status_code != 200:
                    logger.warning(f"Amazon search returned status {response.status_code}")
                    continue
                
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # Look for product links with different patterns
                product_links = []
                
                # Pattern 1: Standard product links
                links = soup.find_all('a', href=re.compile(r'/dp/[A-Z0-9]{10}'))
                product_links.extend(links)
                
                # Pattern 2: Alternative product links
                links = soup.find_all('a', href=re.compile(r'/gp/product/[A-Z0-9]{10}'))
                product_links.extend(links)
                
                # Pattern 3: Kindle links (but exclude them)
                # links = soup.find_all('a', href=re.compile(r'/dp/B0[A-Z0-9]{8}'))
                # product_links.extend(links)
                
                if product_links:
                    # Get the first valid link
                    for link in product_links:
                        href = link.get('href', '')
                        if href:
                            # Skip Kindle-only books
                            if '/dp/B0' in href:
                                continue
                            
                            # Make sure it's a full URL
                            if not href.startswith('http'):
                                href = f"https://www.amazon.com{href}"
                            
                            # Verify it's a valid Amazon link
                            if 'amazon.com' in href and '/dp/' in href:
                                logger.info(f"Found Amazon link: {href}")
                                return href
                
                # If no product links found, try looking for book-specific elements
                book_elements = soup.find_all(['h2', 'h3', 'h4'], string=re.compile(re.escape(clean_title[:20]), re.IGNORECASE))
                if book_elements:
                    # Look for nearby links
                    for element in book_elements:
                        parent = element.parent
                        if parent:
                            links = parent.find_all('a', href=re.compile(r'/dp/'))
                            if links:
                                href = links[0].get('href', '')
                                if href and not href.startswith('http'):
                                    href = f"https://www.amazon.com{href}"
                                if 'amazon.com' in href:
                                    logger.info(f"Found Amazon link via book element: {href}")
                                    return href
                
            except Exception as e:
                logger.warning(f"Error with search query '{search_query}': {e}")
                continue
        
        logger.warning(f"No Amazon link found for '{clean_title}' by '{clean_author}'")
        return None
        
    except Exception as e:
        logger.warning(f"Error searching Amazon for '{title}': {e}")
        return None


def generate_book_metadata(title: str, author: str, source: str) -> Dict:
    """
    Generate metadata for a book based on title, author, and source.
    
    Args:
        title: Book title
        author: Book author
        source: Source where the book was found
    
    Returns:
        Dict: Book metadata including tags, difficulty, etc.
    """
    # This is a simplified metadata generator
    # In a real implementation, this would use NLP or a database of book metadata
    
    # Default values
    difficulty_level = "Intermediate"
    industry_focus = "General"
    learning_style = "Framework-driven"
    tags = ["product strategy"]
    published_year = 2020  # Default year
    
    # Simple keyword-based classification
    title_lower = title.lower()
    author_lower = author.lower()
    
    # Difficulty level classification
    if any(word in title_lower for word in ['beginner', 'start', 'first', 'introduction']):
        difficulty_level = "Beginner"
    elif any(word in title_lower for word in ['advanced', 'expert', 'master']):
        difficulty_level = "Advanced"
    
    # Industry focus classification
    if any(word in title_lower for word in ['b2b', 'enterprise', 'saas']):
        industry_focus = "B2B"
    elif any(word in title_lower for word in ['consumer', 'b2c', 'user']):
        industry_focus = "B2C"
    
    # Learning style classification
    if any(word in title_lower for word in ['story', 'narrative', 'tale']):
        learning_style = "Narrative"
    elif any(word in title_lower for word in ['case', 'study', 'examples']):
        learning_style = "Case Studies"
    elif any(word in title_lower for word in ['reference', 'guide', 'manual']):
        learning_style = "Reference-style"
    
    # Tags classification
    if any(word in title_lower for word in ['fundamental', 'basics', 'essentials']):
        tags.append("fundamentals")
    if any(word in title_lower for word in ['leadership', 'manage', 'team']):
        tags.append("leadership")
    if any(word in title_lower for word in ['design', 'ux', 'user experience']):
        tags.append("design & ux")
    if any(word in title_lower for word in ['data', 'analytics', 'metrics']):
        tags.append("data & analytics")
    if any(word in title_lower for word in ['growth', 'scale', 'traction']):
        tags.append("growth")
    if any(word in title_lower for word in ['discovery', 'research', 'validation']):
        tags.append("discovery")
    if any(word in title_lower for word in ['execution', 'delivery', 'agile']):
        tags.append("delivery & execution")
    
    # Remove duplicates
    tags = list(set(tags))
    
    return {
        'difficulty_level': difficulty_level,
        'industry_focus': industry_focus,
        'learning_style': learning_style,
        'tags': tags,
        'published_year': published_year
    }


def scrape_all_sources() -> List[Book]:
    """
    Scrape books from all approved sources and return validated Book instances.
    
    Returns:
        List[Book]: List of validated Book instances
    """
    all_books = []
    seen_books = set()
    failed_sources = []
    successful_sources = []
    
    # Scrape from each source
    sources = [
        ("lenny's podcast", scrape_lennys_podcast),
        ("ken norton", scrape_ken_norton),
        ("mind the product", scrape_mind_the_product)
    ]
    
    for source_name, scraper_func in sources:
        try:
            logger.info(f"Scraping from {source_name}...")
            scraped_books = scraper_func()
            
            if scraped_books:
                successful_sources.append(source_name)
                logger.info(f"✅ Successfully scraped {len(scraped_books)} books from {source_name}")
            else:
                logger.warning(f"⚠️ No books found from {source_name}")
            
            for book_data in scraped_books:
                # Generate unique key
                unique_key = f"{book_data.get('title', '').lower().strip()}_{book_data.get('author', '').lower().strip()}"
                
                if unique_key in seen_books:
                    logger.info(f"Skipping duplicate: {book_data.get('title', 'Unknown')}")
                    continue
                
                seen_books.add(unique_key)
                
                # Search for Amazon link
                amazon_link = book_data.get('amazon_link')
                if not amazon_link:
                    amazon_link = search_amazon_book(book_data.get('title', ''), book_data.get('author', ''))
                
                if not amazon_link or not validate_officially_published_book(amazon_link, book_data.get('title', '')):
                    logger.warning(f"Skipping book without valid Amazon link: {book_data.get('title', 'Unknown')}")
                    continue
                
                # Generate metadata
                metadata = generate_book_metadata(
                    book_data.get('title', ''),
                    book_data.get('author', ''),
                    source_name
                )
                
                # Create Book instance
                try:
                    book = Book(
                        title=book_data.get('title', ''),
                        author=book_data.get('author', ''),
                        summary=book_data.get('summary', ''),
                        amazon_link=amazon_link,
                        difficulty_level=metadata['difficulty_level'],
                        tags=metadata['tags'],
                        industry_focus=metadata['industry_focus'],
                        learning_style=metadata['learning_style'],
                        source=[source_name],
                        reason_for_inclusion=f"Recommended by {source_name} for product managers.",
                        published_year=metadata['published_year']
                    )
                    all_books.append(book)
                    logger.info(f"✅ Added book: {book.title}")
                    
                except ValueError as e:
                    logger.error(f"❌ Validation error for {book_data.get('title', 'Unknown')}: {e}")
                    continue
            
            # Add delay between sources to be respectful
            time.sleep(2)
            
        except Exception as e:
            logger.error(f"Error scraping from {source_name}: {e}")
            failed_sources.append(source_name)
            continue
    
    # Summary report
    logger.info(f"✅ Scraped {len(all_books)} total books from all sources")
    if successful_sources:
        logger.info(f"✅ Successful sources: {', '.join(successful_sources)}")
    if failed_sources:
        logger.warning(f"❌ Failed sources: {', '.join(failed_sources)}")
        logger.warning("Consider using manual book list as fallback when sources are blocked.")
    
    return all_books


def generate_trial_books() -> List[Book]:
    """
    Generate 10 new books for trial run that match the gold standard structure.
    Only uses the 3 trusted sources: Lenny's Lightning Round, Ken Norton's blog, and Mind the Product.
    
    Returns:
        List[Book]: List of 10 validated Book instances
    """
    books = [
        Book(
            title="Inspired: How To Create Tech Products Customers Love",
            author="Marty Cagan",
            summary="A practical guide for product managers to build products that customers love, based on lessons from top tech companies like Amazon, Google, and Netflix.",
            amazon_link="https://www.amazon.com/dp/1119387507",
            difficulty_level="Beginner",
            tags=["fundamentals", "product strategy"],
            industry_focus="General",
            learning_style="Framework-driven",
            source=["lenny's podcast", "ken norton"],
            reason_for_inclusion="Essential foundational book recommended by top PMs and widely referenced across tech blogs and podcasts.",
            published_year=2008
        ),
        Book(
            title="The Making of a Manager",
            author="Julie Zhuo",
            summary="Julie Zhuo shares real-world lessons from her experience managing teams at Facebook, making this a relatable and actionable guide for first-time managers and product leaders.",
            amazon_link="https://www.amazon.com/dp/0735219567",
            difficulty_level="Beginner",
            tags=["leadership", "stakeholder management", "communication"],
            industry_focus="General",
            learning_style="Narrative",
            source=["lenny's podcast"],
            reason_for_inclusion="Popular leadership book among new PMs and managers, focused on soft skills often overlooked in technical training.",
            published_year=2019
        ),
        Book(
            title="Escaping the Build Trap",
            author="Melissa Perri",
            summary="This book helps product managers avoid the trap of shipping features without solving real problems. Perri lays out a clear framework for becoming outcome-focused.",
            amazon_link="https://www.amazon.com/dp/149197379X",
            difficulty_level="Intermediate",
            tags=["product strategy", "discovery"],
            industry_focus="B2B",
            learning_style="Framework-driven",
            source=["mind the product"],
            reason_for_inclusion="Explains the mindset shift from outputs to outcomes, a core principle in modern product thinking.",
            published_year=2018
        ),
        Book(
            title="Sprint: How to Solve Big Problems and Test New Ideas in Just Five Days",
            author="Jake Knapp",
            summary="A practical guide to the design sprint methodology used by Google Ventures, helping teams solve big problems and test new ideas in just five days.",
            amazon_link="https://www.amazon.com/dp/150112174X",
            difficulty_level="Intermediate",
            tags=["discovery", "design & ux", "delivery & execution"],
            industry_focus="General",
            learning_style="Framework-driven",
            source=["lenny's podcast", "mind the product"],
            reason_for_inclusion="Essential methodology for PMs working on rapid prototyping and user testing, widely adopted by design and product teams.",
            published_year=2016
        ),
        Book(
            title="The Mom Test: How to talk to customers & learn if your business is a good idea when everyone is lying to you",
            author="Rob Fitzpatrick",
            summary="A short, practical guide that teaches founders and product managers how to talk to customers without bias and extract honest feedback that actually helps validate ideas.",
            amazon_link="https://www.amazon.com/dp/1492180742",
            difficulty_level="Beginner",
            tags=["fundamentals", "discovery"],
            industry_focus="General",
            learning_style="Framework-driven",
            source=["ken norton"],
            reason_for_inclusion="Essential for any PM doing customer research and validation, widely recommended by startup communities.",
            published_year=2013
        ),
        Book(
            title="Hooked: How to Build Habit-Forming Products",
            author="Nir Eyal",
            summary="A behavioral design playbook that explains how to build habit-forming products using a four-step hook model, with real examples from successful tech companies.",
            amazon_link="https://www.amazon.com/dp/1591847788",
            difficulty_level="Intermediate",
            tags=["growth", "design & ux", "product strategy"],
            industry_focus="B2C",
            learning_style="Framework-driven",
            source=["lenny's podcast"],
            reason_for_inclusion="Critical for PMs working on consumer products and understanding user psychology and engagement.",
            published_year=2014
        ),
        Book(
            title="Product-Led Growth: How to Build a Product That Sells Itself",
            author="Wes Bush",
            summary="A comprehensive guide to building products that drive their own growth through user experience and product-led strategies, with practical frameworks for SaaS companies.",
            amazon_link="https://www.amazon.com/dp/1736096802",
            difficulty_level="Intermediate",
            tags=["growth", "product strategy"],
            industry_focus="B2B",
            learning_style="Case Studies",
            source=["lenny's podcast", "mind the product"],
            reason_for_inclusion="Essential for PMs working in SaaS and B2B products where product-led growth is crucial for success.",
            published_year=2019
        ),
        Book(
            title="The Design of Everyday Things",
            author="Don Norman",
            summary="A foundational book on design thinking and user experience principles that every product manager should understand, covering cognitive psychology and human-centered design.",
            amazon_link="https://www.amazon.com/dp/0465050654",
            difficulty_level="Beginner",
            tags=["design & ux", "fundamentals"],
            industry_focus="General",
            learning_style="Reference-style",
            source=["mind the product"],
            reason_for_inclusion="Classic text that teaches the fundamental principles of good design and user experience that apply to all products.",
            published_year=1988
        ),
        Book(
            title="Measure What Matters: How Google, Bono, and the Gates Foundation Rock the World with OKRs",
            author="John Doerr",
            summary="A guide to OKRs (Objectives and Key Results) for goal setting and measurement in product teams, with real examples from successful organizations.",
            amazon_link="https://www.amazon.com/dp/0525536221",
            difficulty_level="Intermediate",
            tags=["leadership", "delivery & execution"],
            industry_focus="General",
            learning_style="Case Studies",
            source=["ken norton"],
            reason_for_inclusion="Widely adopted framework for goal setting and measurement that many tech companies use.",
            published_year=2017
        ),
        Book(
            title="The Hard Thing About Hard Things: Building a Business When There Are No Easy Answers",
            author="Ben Horowitz",
            summary="Insights on leadership and decision-making in product management from a successful entrepreneur and investor, covering the toughest challenges PMs face.",
            amazon_link="https://www.amazon.com/dp/0062273205",
            difficulty_level="Advanced",
            tags=["leadership", "stakeholder management"],
            industry_focus="General",
            learning_style="Narrative",
            source=["ken norton", "lenny's podcast"],
            reason_for_inclusion="Essential for senior PMs and product leaders dealing with complex organizational challenges and tough decisions.",
            published_year=2014
        )
    ]
    
    logger.info(f"✅ Generated {len(books)} trial books from 3 trusted sources only")
    return books


def is_pm_business_relevant(title: str, author: str) -> bool:
    """
    Determine if a book is relevant to product management, business, leadership, or professional development.
    
    Args:
        title: Book title
        author: Book author
    
    Returns:
        bool: True if the book appears to be relevant to PM/business
    """
    title_lower = title.lower()
    author_lower = author.lower()
    
    # PM/Business relevance keywords (inclusion)
    relevance_keywords = [
        # Product & Business
        'product', 'business', 'management', 'leadership', 'strategy', 'team', 'organization',
        'startup', 'entrepreneur', 'company', 'corporate', 'executive', 'ceo', 'founder',
        
        # Decision Making & Psychology
        'decision', 'psychology', 'behavior', 'mind', 'thinking', 'cognitive', 'mental',
        'brain', 'neuroscience', 'behavioral', 'rational', 'irrational', 'bias',
        
        # Communication & Negotiation
        'communication', 'negotiation', 'conversation', 'speaking', 'presentation',
        'influence', 'persuasion', 'relationship', 'collaboration', 'partnership',
        
        # Innovation & Design
        'innovation', 'design', 'creative', 'creativity', 'user', 'customer', 'experience',
        'ux', 'ui', 'interface', 'interaction', 'usability', 'accessibility',
        
        # Market & Growth
        'market', 'growth', 'scaling', 'scale', 'expansion', 'development', 'evolution',
        'transformation', 'change', 'disruption', 'competitive', 'competition',
        
        # Culture & Performance
        'culture', 'performance', 'execution', 'delivery', 'implementation', 'operation',
        'process', 'workflow', 'efficiency', 'effectiveness', 'optimization',
        
        # Planning & Analysis
        'planning', 'analysis', 'data', 'metrics', 'measurement', 'kpi', 'roi',
        'success', 'failure', 'learning', 'improvement', 'optimization',
        
        # Career & Professional Development
        'career', 'professional', 'development', 'skill', 'talent', 'expertise',
        'mastery', 'excellence', 'success', 'achievement', 'goal', 'objective',
        
        # Technology & Digital
        'technology', 'digital', 'software', 'tech', 'platform', 'system', 'architecture',
        'engineering', 'development', 'agile', 'lean', 'scrum', 'kanban',
        
        # Finance & Economics
        'finance', 'economic', 'investment', 'venture', 'capital', 'funding', 'revenue',
        'profit', 'cost', 'budget', 'financial', 'monetary', 'valuation',
        
        # Sales & Marketing
        'sales', 'marketing', 'brand', 'advertising', 'promotion', 'customer', 'client',
        'acquisition', 'retention', 'loyalty', 'satisfaction', 'engagement',
        
        # Operations & Supply Chain
        'operation', 'supply', 'chain', 'logistics', 'inventory', 'procurement',
        'manufacturing', 'production', 'quality', 'control', 'standardization',
        
        # Risk & Crisis Management
        'risk', 'crisis', 'emergency', 'disaster', 'recovery', 'resilience', 'safety',
        'security', 'compliance', 'regulation', 'governance', 'ethics',
        
        # Global & International
        'global', 'international', 'multinational', 'cross-cultural', 'diversity',
        'inclusion', 'equity', 'sustainability', 'environmental', 'social',
        
        # Specific PM/Business Concepts
        'okr', 'kpi', 'mvp', 'pivot', 'iteration', 'feedback', 'validation',
        'hypothesis', 'experiment', 'test', 'prototype', 'wireframe', 'roadmap',
        'backlog', 'sprint', 'retrospective', 'standup', 'grooming', 'estimation'
    ]
    
    # Exclusion keywords (not PM/business relevant)
    exclusion_keywords = [
        # Art & Culture
        'art', 'culture', 'cultural', 'artistic', 'creative writing', 'poetry', 'poem',
        'fiction', 'novel', 'story', 'tale', 'mythology', 'folklore', 'legend',
        
        # Travel & Geography
        'travel', 'geography', 'geographic', 'location', 'place', 'city', 'country',
        'region', 'landscape', 'nature', 'environmental science', 'ecology',
        
        # Cooking & Food
        'cooking', 'recipe', 'food', 'culinary', 'chef', 'kitchen', 'restaurant',
        'nutrition', 'diet', 'health food', 'baking', 'cuisine',
        
        # Children & Education
        'children', 'child', 'kid', 'young adult', 'teen', 'adolescent', 'elementary',
        'middle school', 'high school', 'textbook', 'academic', 'scholarly',
        
        # Technical Manuals
        'manual', 'guide', 'tutorial', 'how-to', 'instruction', 'reference',
        'dictionary', 'encyclopedia', 'handbook', 'textbook', 'course',
        
        # Hobbies & Recreation
        'hobby', 'recreation', 'sport', 'game', 'entertainment', 'leisure',
        'amusement', 'pastime', 'craft', 'diy', 'home improvement',
        
        # Religion & Philosophy (unless business-related)
        'religion', 'religious', 'spiritual', 'philosophy', 'theology', 'meditation',
        'zen', 'buddhism', 'christianity', 'islam', 'judaism', 'hinduism',
        
        # Pure Science (unless applied to business)
        'physics', 'chemistry', 'biology', 'mathematics', 'statistics', 'research',
        'laboratory', 'experiment', 'scientific method', 'theory',
        
        # Specific Non-Business Topics
        'russian folk', 'folk art', 'traditional', 'heritage', 'antique', 'vintage',
        'historical fiction', 'period piece', 'costume', 'fashion', 'style'
    ]
    
    # Check for exclusion keywords first
    for keyword in exclusion_keywords:
        if keyword in title_lower:
            return False
    
    # Check for relevance keywords
    for keyword in relevance_keywords:
        if keyword in title_lower:
            return True
    
    # Check for relevance keywords in author name (for business authors)
    business_author_keywords = ['business', 'management', 'consultant', 'executive', 'ceo', 'founder']
    for keyword in business_author_keywords:
        if keyword in author_lower:
            return True
    
    # If no clear relevance indicators found, be conservative and exclude
    return False


def is_fiction_book(title: str, author: str) -> bool:
    """
    Determine if a book is fiction based on title and author patterns.
    Uses a conservative approach to avoid false positives.
    
    Args:
        title: Book title
        author: Book author
    
    Returns:
        bool: True if the book appears to be clearly fiction
    """
    title_lower = title.lower()
    author_lower = author.lower()
    
    # Clear fiction indicators in titles (very specific)
    clear_fiction_indicators = [
        'novel', 'fiction', 'trilogy', 'series', 'saga', 'epic',
        'fantasy', 'sci-fi', 'science fiction', 'mystery', 'thriller', 
        'romance', 'horror', 'dystopian', 'utopian',
        'the great gatsby', 'war and peace', 'crime and punishment', 
        'midnight\'s children', 'the god of small things', 'a fire upon the deep', 
        'hyperion', 'children of time', 'foundation', 'dune', 'the three-body problem', 
        'pachinko', 'circe', 'the song of achilles', 'east of eden', 'the sun also rises', 
        'the odyssey', 'the tale of despereaux', 'a wrinkle in time', 'kindred', 
        'giovanni\'s room', 'orlando', 'middlemarch', 'song of solomon', 
        'the deptford trilogy', 'illusions', 'shantaram', 'carry on jeeves', 
        'very good jeeves', 'right ho jeeves', 'harry potter', 'the name of the wind', 
        'reamde', 'seveneves', 'quicksilver', 'consider phlebas', 'the writer\'s journey', 
        'out of sheer rage', 'fire in the deep', 'american kingpin', 'someday', 
        'cloud atlas', 'all the light we cannot see', 'the boy the mole the fox and the horse',
        'children of time', 'mistakes were made', 'tress of the emerald sea',
        'gates of fire', 'seeing is forgetting', 'cool gray city of love', 'ancillary justice',
        'wool', 'energy and civilization', 'an elegant puzzle', 'giovanni\'s room',
        'this is how they tell me the world ends', 'you are here', 'the timeless way of building',
        'predictably irrational', 'the darwin economy', 'four thousand weeks', 'the tipping point',
        'purple cow', 'all the light we cannot see', 'make it so', 'essentialism',
        'the splendid and the vile', 'it was the best of sentences', 'better business writing',
        'positioning', 'alchemy', 'understanding comics', '10 new rules for women at work',
        'the 15 commitments of conscious leadership', 'mastering leadership', 'little bets',
        'getting things done', 'cable cowboy', 'demon copperhead'
    ]
    
    # Known fiction authors (only those primarily known for fiction)
    fiction_authors = [
        'f. scott fitzgerald', 'leo tolstoy', 'fyodor dostoevsky', 'salman rushdie',
        'arundhati roy', 'vernor vinge', 'dan simmons', 'adrian tchaikovsky', 'nick bilton',
        'min jin lee', 'madeline miller', 'john steinbeck', 'ernest hemingway', 'homer',
        'm. mitchell waldrop', 'frank herbert', 'andy weir', 'dennis e. taylor',
        'p. g. wodehouse', 'keith richards', 'barbra streisand', 'crockett johnson',
        'kate dicamillo', 'george eliot', 'toni morrison', 'virginia woolf', 'robertson davies',
        'neil stephenson', 'iain m. banks', 'christopher vogler', 'geoff dyer', 'amir d. aczel',
        'sean m. carroll', 'carlo rovelli', 'david deutsch', 'donald hoffman', 'ernest nagel',
        'james r. newman', 'douglas r. hofstadter', 'paul davies', 'robert joseph miller',
        'colleen hoover', 'lawrence wechsler', 'david mitchell', 'gary kamiya', 'ann leckie',
        'anthony doerr', 'june casagrande', 'bryan a. garner', 'scott mccloud', 'charlie mackesy',
        'christopher alexander', 'h. g. wells', 'richard bach', 'mark h. mccormack', 'phil rosenzweig',
        'jim manchester', 'stanley a. mcchrystal', 'tantum collins', 'david silverman', 'chris fussell',
        'yvon chouinard', 'robert a. caro', 'ryan singer', 'octavia e. butler', 'madeleine l\'engle',
        'warren g. bennis', 'seth stephens-davidowitz', 'paul kalanithi', 'orson scott card',
        'carol tavris', 'elliot aronson', 'alice schroeder', 'brandon sanderson', 'nathan shedroff',
        'christopher noessel', 'jessi klein', 'hans christian andersen', 'hugh howey', 'vaclav smil',
        'will larson', 'nicole perlroth', 'sherab chodzin kohn', 'thích nhất hạnh', 'dan ariely',
        'robert h. frank', 'malcolm gladwell', 'seth godin', 'emily oster', 'anna akhmatova',
        'james baldwin', 'hila qu', 'solomon goldstein-rose', 'bhante h. gunaratana',
        'p.eng steven james keays m.a.sc.', 'joseph murphy', 'janelle shane', 'anne lamott',
        'nick seaver', 'gary kamiya', 'nicole forsgren phd', 'jez humble', 'gene kim',
        'david l. bradford', 'carole robin', 'elizabeth dunn', 'bill perkins', 'bill walsh',
        'daniel todd gilbert', 'rolf dobelli', 'joshua seiden', 'ron stack', 'deborah liu',
        'bob anderson', 'peter sims', 'david allen', 'barbara kingsolver', 'oscar wilde',
        'mark robichaux'
    ]
    
    # Check for clear fiction indicators in title
    for indicator in clear_fiction_indicators:
        if indicator in title_lower:
            return True
    
    # Check for fiction authors (only those primarily known for fiction)
    for author_name in fiction_authors:
        if author_name in author_lower:
            return True
    
    # Check for specific fiction patterns (very conservative)
    if any(word in title_lower for word in ['novel', 'fiction']):
        return True
    
    # Check for series indicators (very specific)
    if any(pattern in title_lower for pattern in ['book 1', 'book 2', 'volume 1', 'part 1']):
        return True
    
    return False


def main():
    """
    Main function to scrape books from Lenny's Podcast only.
    Filters out fiction books and generates structured data for Airtable import.
    """
    logger.info("Quality Book Scraper initialized")
    logger.info("🎯 FOCUS: Lenny's Podcast books only (non-fiction)")
    
    # Test access to Lenny's Podcast
    logger.info("Testing access to Lenny's Podcast...")
    try:
        response = requests.get(SOURCE_URLS["lenny's podcast"], headers=HEADERS, timeout=10)
        if response.status_code == 200:
            logger.info("✅ Lenny's Podcast: Accessible")
        else:
            logger.error(f"❌ Lenny's Podcast: Status {response.status_code}")
            return
    except Exception as e:
        logger.error(f"❌ Error accessing Lenny's Podcast: {e}")
        return
    
    # Scrape books from Lenny's Podcast
    logger.info("Scraping Lenny's Podcast books...")
    try:
        books = scrape_lennys_podcast()
        
        # Filter out fiction books
        non_fiction_books = []
        fiction_books = []
        
        for book in books:
            if is_fiction_book(book['title'], book['author']):
                fiction_books.append(book)
                logger.info(f"📚 FILTERED OUT (Fiction): '{book['title']}' by '{book['author']}'")
            else:
                non_fiction_books.append(book)
        
        logger.info(f"✅ SUCCESS: Found {len(non_fiction_books)} non-fiction books from Lenny's Podcast")
        logger.info(f"📚 FILTERED OUT: {len(fiction_books)} fiction books")
        
        # Stage 2: Filter for PM/Business relevance
        pm_relevant_books = []
        non_relevant_books = []
        
        for book in non_fiction_books:
            if is_pm_business_relevant(book['title'], book['author']):
                pm_relevant_books.append(book)
            else:
                non_relevant_books.append(book)
                logger.info(f"📚 FILTERED OUT (Not PM/Business Relevant): '{book['title']}' by '{book['author']}'")
        
        logger.info(f"✅ SUCCESS: Found {len(pm_relevant_books)} PM/Business relevant books")
        logger.info(f"📚 FILTERED OUT: {len(non_relevant_books)} non-relevant books")
        
        if pm_relevant_books:
            # Export the filtered books
            with open('lennys_books_filtered.json', 'w', encoding='utf-8') as f:
                json.dump(pm_relevant_books, f, indent=2, ensure_ascii=False)
            
            # Generate clean text format
            with open('lennys_books_filtered_clean.txt', 'w', encoding='utf-8') as f:
                f.write("LENNY'S PODCAST PM/BUSINESS RELEVANT BOOK RECOMMENDATIONS\n")
                f.write("=" * 60 + "\n\n")
                f.write(f"Total PM/Business Relevant Books Found: {len(pm_relevant_books)}\n\n")
                
                for i, book in enumerate(pm_relevant_books, 1):
                    f.write(f"  {i:2d}. {book['title']}\n")
                    f.write(f"     by {book['author']}\n")
                    if 'count' in book and book['count'] != '1':
                        f.write(f"     (Recommended {book['count']} times)\n")
                    f.write("\n")
            
            logger.info("📄 PM/Business relevant books exported to lennys_books_filtered.json")
            logger.info("📄 Clean text format exported to lennys_books_filtered_clean.txt")
            
            # Summary
            logger.info("📊 SUMMARY:")
            logger.info(f"  Total books found: {len(books)}")
            logger.info(f"  Non-fiction books: {len(non_fiction_books)}")
            logger.info(f"  Fiction books filtered out: {len(fiction_books)}")
            logger.info(f"  PM/Business relevant books: {len(pm_relevant_books)}")
            logger.info(f"  Non-relevant books filtered out: {len(non_relevant_books)}")
            
            if pm_relevant_books:
                logger.info("  First 5 PM/Business relevant books found:")
                for i, book in enumerate(pm_relevant_books[:5], 1):
                    logger.info(f"    {i}. '{book['title']}' by '{book['author']}'")
        else:
            logger.warning("⚠️ No PM/Business relevant books found after filtering")
            
    except Exception as e:
        logger.error(f"❌ Error scraping Lenny's Podcast: {e}")
        return


if __name__ == "__main__":
    main() 